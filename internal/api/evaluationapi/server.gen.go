// Package evaluationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.2 DO NOT EDIT.
package evaluationapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for PostEvaluationRequestEvaluationResult.
const (
	Negative PostEvaluationRequestEvaluationResult = "negative"
	Neutral  PostEvaluationRequestEvaluationResult = "neutral"
	Positive PostEvaluationRequestEvaluationResult = "positive"
)

// ErrorInformation Information about the error.
type ErrorInformation struct {
	// Code Some unique error code.
	Code int32 `json:"code"`

	// Message Error message.
	Message string `json:"message"`
}

// Evaluations Evaluation statistics.
type Evaluations struct {
	// NumNegative number of negative evaluations.
	NumNegative int32 `json:"numNegative"`

	// NumNeutral number of neutral evaluations.
	NumNeutral int32 `json:"numNeutral"`

	// NumPositive Number of positive evaluations.
	NumPositive int32 `json:"numPositive"`
}

// GetEvaluationResponse The data of the next evaluation.
type GetEvaluationResponse struct {
	// Evaluations Evaluation statistics.
	Evaluations Evaluations `json:"evaluations"`

	// Id Unique id of the evaluation.
	Id int32 `json:"id"`

	// Request The message Message.
	Request Message `json:"request"`

	// Response The message Message.
	Response Message `json:"response"`
}

// Message The message Message.
type Message struct {
	// Body e.g. E-Mail body. The actual message.
	Body string `json:"body"`

	// Date string containing the date when the email was received in ISO 8601 format.
	Date string `json:"date"`

	// From Name of the author.
	From string `json:"from"`

	// Subject e.g. E-Mail subject.
	Subject string `json:"subject"`
}

// PostEvaluationRequest The result of the current evaluation.
type PostEvaluationRequest struct {
	EvaluationResult PostEvaluationRequestEvaluationResult `json:"evaluationResult"`

	// Id Unique id of the message evaluation.
	Id int32 `json:"id"`
}

// PostEvaluationRequestEvaluationResult defines model for PostEvaluationRequest.EvaluationResult.
type PostEvaluationRequestEvaluationResult string

// Authorization Bearer Token.
type Authorization = string

// GetEvaluationParams defines parameters for GetEvaluation.
type GetEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationParams defines parameters for PostEvaluation.
type PostEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationJSONRequestBody defines body for PostEvaluation for application/json ContentType.
type PostEvaluationJSONRequestBody = PostEvaluationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the next message for evaluation.
	// (GET /evaluation)
	GetEvaluation(c *gin.Context, params GetEvaluationParams)
	// Posts the evaluation of the current evaluation response.
	// (POST /evaluation)
	PostEvaluation(c *gin.Context, params PostEvaluationParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEvaluation operation middleware
func (siw *ServerInterfaceWrapper) GetEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvaluation(c, params)
}

// PostEvaluation operation middleware
func (siw *ServerInterfaceWrapper) PostEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvaluation(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/evaluation", wrapper.GetEvaluation)
	router.POST(options.BaseURL+"/evaluation", wrapper.PostEvaluation)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
