// Package evaluationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.2 DO NOT EDIT.
package evaluationapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for PostEvaluationRequestEvaluationResult.
const (
	Negative PostEvaluationRequestEvaluationResult = "negative"
	Neutral  PostEvaluationRequestEvaluationResult = "neutral"
	Positive PostEvaluationRequestEvaluationResult = "positive"
)

// ErrorInformation Information about the error.
type ErrorInformation struct {
	// Code Some unique error code.
	Code int32 `json:"code"`

	// Message Error message.
	Message string `json:"message"`
}

// Evaluations Evaluation statistics.
type Evaluations struct {
	// NumNegative number of negative evaluations.
	NumNegative int32 `json:"numNegative"`

	// NumNeutral number of neutral evaluations.
	NumNeutral int32 `json:"numNeutral"`

	// NumPositive Number of positive evaluations.
	NumPositive int32 `json:"numPositive"`
}

// GetEvaluationResponse The data of the next evaluation.
type GetEvaluationResponse struct {
	// Evaluations Evaluation statistics.
	Evaluations Evaluations `json:"evaluations"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`

	// Request The message Message.
	Request Message `json:"request"`

	// Response The message Message.
	Response Message `json:"response"`
}

// Message The message Message.
type Message struct {
	// Body e.g. E-Mail body. The actual message.
	Body string `json:"body"`

	// Date string containing the date when the email was received in ISO 8601 format.
	Date string `json:"date"`

	// From Name of the author.
	From string `json:"from"`

	// Subject e.g. E-Mail subject.
	Subject string `json:"subject"`
}

// PostEvaluationRequest The result of the current evaluation.
type PostEvaluationRequest struct {
	EvaluationResult PostEvaluationRequestEvaluationResult `json:"evaluationResult"`

	// Id Unique id of the message evaluation.
	Id string `json:"id"`
}

// PostEvaluationRequestEvaluationResult defines model for PostEvaluationRequest.EvaluationResult.
type PostEvaluationRequestEvaluationResult string

// Authorization Bearer Token.
type Authorization = string

// GetEvaluationParams defines parameters for GetEvaluation.
type GetEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationParams defines parameters for PostEvaluation.
type PostEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationJSONRequestBody defines body for PostEvaluation for application/json ContentType.
type PostEvaluationJSONRequestBody = PostEvaluationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the next message for evaluation.
	// (GET /evaluation)
	GetEvaluation(c *gin.Context, params GetEvaluationParams)
	// Posts the evaluation of the current evaluation response.
	// (POST /evaluation)
	PostEvaluation(c *gin.Context, params PostEvaluationParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEvaluation operation middleware
func (siw *ServerInterfaceWrapper) GetEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvaluation(c, params)
}

// PostEvaluation operation middleware
func (siw *ServerInterfaceWrapper) PostEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvaluation(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/evaluation", wrapper.GetEvaluation)
	router.POST(options.BaseURL+"/evaluation", wrapper.PostEvaluation)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
