// Package evaluationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package evaluationapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for PostEvaluationRequestEvaluationResult.
const (
	Negative PostEvaluationRequestEvaluationResult = "negative"
	Neutral  PostEvaluationRequestEvaluationResult = "neutral"
	Positive PostEvaluationRequestEvaluationResult = "positive"
)

// ErrorInformation Information about the error.
type ErrorInformation struct {
	// Code Some unique error code.
	Code int32 `json:"code"`

	// Message Error message.
	Message string `json:"message"`
}

// Evaluations Evaluation statistics.
type Evaluations struct {
	// NumNegative number of negative evaluations.
	NumNegative int32 `json:"numNegative"`

	// NumNeutral number of neutral evaluations.
	NumNeutral int32 `json:"numNeutral"`

	// NumPositive Number of positive evaluations.
	NumPositive int32 `json:"numPositive"`
}

// GetEvaluationResponse The data of the next evaluation.
type GetEvaluationResponse struct {
	EvaluationPrompt string `json:"evaluationPrompt"`

	// Evaluations Evaluation statistics.
	Evaluations Evaluations `json:"evaluations"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`

	// Request Message.
	Request Message `json:"request"`

	// Response Message.
	Response Message `json:"response"`
}

// GetStatisticsResponse The statistics of the evaluations grouped by scenario
type GetStatisticsResponse struct {
	Scenarios *[]ScenarioStatistics `json:"scenarios,omitempty"`
}

// Message Message.
type Message struct {
	// Body e.g. E-Mail body. The actual message.
	Body string `json:"body"`

	// Date string containing the date when the email was received in ISO 8601 format.
	Date string `json:"date"`

	// From Name of the author.
	From string `json:"from"`

	// Subject e.g. E-Mail subject.
	Subject string `json:"subject"`
}

// NameValuePair The statistics of the evaluations
type NameValuePair struct {
	// Name Name of the category.
	Name string `json:"name"`

	// Value Amout of rated question/response pairs in this category.
	Value int32 `json:"value"`
}

// PostEvaluationRequest The result of the current evaluation.
type PostEvaluationRequest struct {
	EvaluationResult PostEvaluationRequestEvaluationResult `json:"evaluationResult"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`
}

// PostEvaluationRequestEvaluationResult defines model for PostEvaluationRequest.EvaluationResult.
type PostEvaluationRequestEvaluationResult string

// RatingScore defines model for RatingScore.
type RatingScore struct {
	// Max Maximum of rating Score.
	Max float32 `json:"max"`

	// Min Minimum of rating Score.
	Min float32 `json:"min"`

	// Value Rating score of the scenario.
	Value float32 `json:"value"`
}

// ScenarioStatistics Statistics per Scenario.
type ScenarioStatistics struct {
	// Description The description of the Scenario.
	Description *string `json:"description,omitempty"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`

	// Name The name of the Scenario
	Name               string          `json:"name"`
	ProgressStatistics []NameValuePair `json:"progressStatistics"`
	RatingScore        RatingScore     `json:"ratingScore"`
	ResultStatistics   []NameValuePair `json:"resultStatistics"`

	// SystemPrompt The used systemprompt for the scenario.
	SystemPrompt *string `json:"systemPrompt,omitempty"`

	// TotalResponseCount The amount of questions and response evaluated in this scenario.
	TotalResponseCount int32 `json:"totalResponseCount"`
}

// Authorization Bearer Token.
type Authorization = string

// GetEvaluationParams defines parameters for GetEvaluation.
type GetEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationParams defines parameters for PostEvaluation.
type PostEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// GetStatisticsParams defines parameters for GetStatistics.
type GetStatisticsParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationJSONRequestBody defines body for PostEvaluation for application/json ContentType.
type PostEvaluationJSONRequestBody = PostEvaluationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the next message for evaluation.
	// (GET /evaluation)
	GetEvaluation(c *gin.Context, params GetEvaluationParams)
	// Posts the evaluation of the current evaluation response.
	// (POST /evaluation)
	PostEvaluation(c *gin.Context, params PostEvaluationParams)
	// Gets the statistics.
	// (GET /statistics)
	GetStatistics(c *gin.Context, params GetStatisticsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEvaluation operation middleware
func (siw *ServerInterfaceWrapper) GetEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvaluation(c, params)
}

// PostEvaluation operation middleware
func (siw *ServerInterfaceWrapper) PostEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvaluation(c, params)
}

// GetStatistics operation middleware
func (siw *ServerInterfaceWrapper) GetStatistics(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatisticsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatistics(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/evaluation", wrapper.GetEvaluation)
	router.POST(options.BaseURL+"/evaluation", wrapper.PostEvaluation)
	router.GET(options.BaseURL+"/statistics", wrapper.GetStatistics)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
