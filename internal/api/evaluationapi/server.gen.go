// Package evaluationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.2 DO NOT EDIT.
package evaluationapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Defines values for PostEvaluationRequestEvaluationResult.
const (
	Negative PostEvaluationRequestEvaluationResult = "negative"
	Neutral  PostEvaluationRequestEvaluationResult = "neutral"
	Positive PostEvaluationRequestEvaluationResult = "positive"
)

// ErrorInformation Information about the error.
type ErrorInformation struct {
	// Code Some unique error code.
	Code int32 `json:"code"`

	// Message Error message.
	Message string `json:"message"`
}

// Evaluations Evaluation statistics.
type Evaluations struct {
	// NumNegative number of negative evaluations.
	NumNegative int32 `json:"numNegative"`

	// NumNeutral number of neutral evaluations.
	NumNeutral int32 `json:"numNeutral"`

	// NumPositive Number of positive evaluations.
	NumPositive int32 `json:"numPositive"`
}

// GetEvaluationResponse The data of the next evaluation.
type GetEvaluationResponse struct {
	// Evaluations Evaluation statistics.
	Evaluations Evaluations `json:"evaluations"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`

	// Request Message.
	Request Message `json:"request"`

	// Response Message.
	Response Message `json:"response"`
}

// GetStatisticsResponse The statistics of the evaluations grouped by scenario
type GetStatisticsResponse struct {
	Scenarios *[]ScenarioStatistics `json:"scenarios,omitempty"`
}

// Message Message.
type Message struct {
	// Body e.g. E-Mail body. The actual message.
	Body string `json:"body"`

	// Date string containing the date when the email was received in ISO 8601 format.
	Date string `json:"date"`

	// From Name of the author.
	From string `json:"from"`

	// Subject e.g. E-Mail subject.
	Subject string `json:"subject"`
}

// NameValuePair The statistics of the evaluations
type NameValuePair struct {
	// Name Name of the category.
	Name string `json:"name"`

	// Value Amout of rated question/response pairs in this category.
	Value int32 `json:"value"`
}

// PostEvaluationRequest The result of the current evaluation.
type PostEvaluationRequest struct {
	EvaluationResult PostEvaluationRequestEvaluationResult `json:"evaluationResult"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`
}

// PostEvaluationRequestEvaluationResult defines model for PostEvaluationRequest.EvaluationResult.
type PostEvaluationRequestEvaluationResult string

// RatingScore defines model for RatingScore.
type RatingScore struct {
	// Max Maximum of rating Score.
	Max float32 `json:"max"`

	// Min Minimum of rating Score.
	Min float32 `json:"min"`

	// Value Rating score of the scenario.
	Value float32 `json:"value"`
}

// ScenarioStatistics Statistics per Scenario.
type ScenarioStatistics struct {
	// Description The description of the Scenario.
	Description *string `json:"description,omitempty"`

	// Id Unique id of the evaluation.
	Id string `json:"id"`

	// Name The name of the Scenario
	Name               string          `json:"name"`
	ProgressStatistics []NameValuePair `json:"progressStatistics"`
	RatingScore        RatingScore     `json:"ratingScore"`
	ResultStatistics   []NameValuePair `json:"resultStatistics"`

	// SystemPrompt The used systemprompt for the scenario.
	SystemPrompt *string `json:"systemPrompt,omitempty"`

	// TotalResponseCount The amount of questions and response evaluated in this scenario.
	TotalResponseCount int32 `json:"totalResponseCount"`
}

// Authorization Bearer Token.
type Authorization = string

// GetEvaluationParams defines parameters for GetEvaluation.
type GetEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationParams defines parameters for PostEvaluation.
type PostEvaluationParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// GetStatisticsParams defines parameters for GetStatistics.
type GetStatisticsParams struct {
	// Authorization JWT token with authorization information.
	Authorization *Authorization `json:"Authorization,omitempty"`
}

// PostEvaluationJSONRequestBody defines body for PostEvaluation for application/json ContentType.
type PostEvaluationJSONRequestBody = PostEvaluationRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Gets the next message for evaluation.
	// (GET /evaluation)
	GetEvaluation(c *gin.Context, params GetEvaluationParams)
	// Posts the evaluation of the current evaluation response.
	// (POST /evaluation)
	PostEvaluation(c *gin.Context, params PostEvaluationParams)
	// Gets the statistics.
	// (GET /statistics)
	GetStatistics(c *gin.Context, params GetStatisticsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEvaluation operation middleware
func (siw *ServerInterfaceWrapper) GetEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvaluation(c, params)
}

// PostEvaluation operation middleware
func (siw *ServerInterfaceWrapper) PostEvaluation(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostEvaluationParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostEvaluation(c, params)
}

// GetStatistics operation middleware
func (siw *ServerInterfaceWrapper) GetStatistics(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStatisticsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization Authorization
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %w", err), http.StatusBadRequest)
			return
		}

		params.Authorization = &Authorization

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetStatistics(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/evaluation", wrapper.GetEvaluation)
	router.POST(options.BaseURL+"/evaluation", wrapper.PostEvaluation)
	router.GET(options.BaseURL+"/statistics", wrapper.GetStatistics)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
