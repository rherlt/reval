// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/user"
)

// EvaluationCreate is the builder for creating a Evaluation entity.
type EvaluationCreate struct {
	config
	mutation *EvaluationMutation
	hooks    []Hook
}

// SetUserId sets the "userId" field.
func (ec *EvaluationCreate) SetUserId(u uuid.UUID) *EvaluationCreate {
	ec.mutation.SetUserId(u)
	return ec
}

// SetResponseId sets the "responseId" field.
func (ec *EvaluationCreate) SetResponseId(u uuid.UUID) *EvaluationCreate {
	ec.mutation.SetResponseId(u)
	return ec
}

// SetExternalId sets the "externalId" field.
func (ec *EvaluationCreate) SetExternalId(s string) *EvaluationCreate {
	ec.mutation.SetExternalId(s)
	return ec
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (ec *EvaluationCreate) SetNillableExternalId(s *string) *EvaluationCreate {
	if s != nil {
		ec.SetExternalId(*s)
	}
	return ec
}

// SetDate sets the "date" field.
func (ec *EvaluationCreate) SetDate(t time.Time) *EvaluationCreate {
	ec.mutation.SetDate(t)
	return ec
}

// SetEvaluationResult sets the "evaluationResult" field.
func (ec *EvaluationCreate) SetEvaluationResult(s string) *EvaluationCreate {
	ec.mutation.SetEvaluationResult(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EvaluationCreate) SetID(u uuid.UUID) *EvaluationCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EvaluationCreate) SetNillableID(u *uuid.UUID) *EvaluationCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ec *EvaluationCreate) SetUserID(id uuid.UUID) *EvaluationCreate {
	ec.mutation.SetUserID(id)
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EvaluationCreate) SetUser(u *User) *EvaluationCreate {
	return ec.SetUserID(u.ID)
}

// SetResponseID sets the "response" edge to the Response entity by ID.
func (ec *EvaluationCreate) SetResponseID(id uuid.UUID) *EvaluationCreate {
	ec.mutation.SetResponseID(id)
	return ec
}

// SetResponse sets the "response" edge to the Response entity.
func (ec *EvaluationCreate) SetResponse(r *Response) *EvaluationCreate {
	return ec.SetResponseID(r.ID)
}

// Mutation returns the EvaluationMutation object of the builder.
func (ec *EvaluationCreate) Mutation() *EvaluationMutation {
	return ec.mutation
}

// Save creates the Evaluation in the database.
func (ec *EvaluationCreate) Save(ctx context.Context) (*Evaluation, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EvaluationCreate) SaveX(ctx context.Context) *Evaluation {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EvaluationCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EvaluationCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EvaluationCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := evaluation.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EvaluationCreate) check() error {
	if _, ok := ec.mutation.UserId(); !ok {
		return &ValidationError{Name: "userId", err: errors.New(`ent: missing required field "Evaluation.userId"`)}
	}
	if _, ok := ec.mutation.ResponseId(); !ok {
		return &ValidationError{Name: "responseId", err: errors.New(`ent: missing required field "Evaluation.responseId"`)}
	}
	if _, ok := ec.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Evaluation.date"`)}
	}
	if _, ok := ec.mutation.EvaluationResult(); !ok {
		return &ValidationError{Name: "evaluationResult", err: errors.New(`ent: missing required field "Evaluation.evaluationResult"`)}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Evaluation.user"`)}
	}
	if _, ok := ec.mutation.ResponseID(); !ok {
		return &ValidationError{Name: "response", err: errors.New(`ent: missing required edge "Evaluation.response"`)}
	}
	return nil
}

func (ec *EvaluationCreate) sqlSave(ctx context.Context) (*Evaluation, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EvaluationCreate) createSpec() (*Evaluation, *sqlgraph.CreateSpec) {
	var (
		_node = &Evaluation{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(evaluation.Table, sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.ExternalId(); ok {
		_spec.SetField(evaluation.FieldExternalId, field.TypeString, value)
		_node.ExternalId = value
	}
	if value, ok := ec.mutation.Date(); ok {
		_spec.SetField(evaluation.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := ec.mutation.EvaluationResult(); ok {
		_spec.SetField(evaluation.FieldEvaluationResult, field.TypeString, value)
		_node.EvaluationResult = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.UserTable,
			Columns: []string{evaluation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.ResponseTable,
			Columns: []string{evaluation.ResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResponseId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EvaluationCreateBulk is the builder for creating many Evaluation entities in bulk.
type EvaluationCreateBulk struct {
	config
	builders []*EvaluationCreate
}

// Save creates the Evaluation entities in the database.
func (ecb *EvaluationCreateBulk) Save(ctx context.Context) ([]*Evaluation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Evaluation, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvaluationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EvaluationCreateBulk) SaveX(ctx context.Context) []*Evaluation {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EvaluationCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EvaluationCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
