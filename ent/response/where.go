// Code generated by ent, DO NOT EDIT.

package response

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldID, id))
}

// ExternalId applies equality check predicate on the "externalId" field. It's identical to ExternalIdEQ.
func ExternalId(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldExternalId, v))
}

// RequestId applies equality check predicate on the "requestId" field. It's identical to RequestIdEQ.
func RequestId(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldRequestId, v))
}

// ScenarioId applies equality check predicate on the "scenarioId" field. It's identical to ScenarioIdEQ.
func ScenarioId(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldScenarioId, v))
}

// From applies equality check predicate on the "from" field. It's identical to FromEQ.
func From(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldFrom, v))
}

// Subject applies equality check predicate on the "subject" field. It's identical to SubjectEQ.
func Subject(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubject, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldBody, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldDate, v))
}

// ExternalIdEQ applies the EQ predicate on the "externalId" field.
func ExternalIdEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldExternalId, v))
}

// ExternalIdNEQ applies the NEQ predicate on the "externalId" field.
func ExternalIdNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldExternalId, v))
}

// ExternalIdIn applies the In predicate on the "externalId" field.
func ExternalIdIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldExternalId, vs...))
}

// ExternalIdNotIn applies the NotIn predicate on the "externalId" field.
func ExternalIdNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldExternalId, vs...))
}

// ExternalIdGT applies the GT predicate on the "externalId" field.
func ExternalIdGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldExternalId, v))
}

// ExternalIdGTE applies the GTE predicate on the "externalId" field.
func ExternalIdGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldExternalId, v))
}

// ExternalIdLT applies the LT predicate on the "externalId" field.
func ExternalIdLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldExternalId, v))
}

// ExternalIdLTE applies the LTE predicate on the "externalId" field.
func ExternalIdLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldExternalId, v))
}

// ExternalIdContains applies the Contains predicate on the "externalId" field.
func ExternalIdContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldExternalId, v))
}

// ExternalIdHasPrefix applies the HasPrefix predicate on the "externalId" field.
func ExternalIdHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldExternalId, v))
}

// ExternalIdHasSuffix applies the HasSuffix predicate on the "externalId" field.
func ExternalIdHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldExternalId, v))
}

// ExternalIdIsNil applies the IsNil predicate on the "externalId" field.
func ExternalIdIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldExternalId))
}

// ExternalIdNotNil applies the NotNil predicate on the "externalId" field.
func ExternalIdNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldExternalId))
}

// ExternalIdEqualFold applies the EqualFold predicate on the "externalId" field.
func ExternalIdEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldExternalId, v))
}

// ExternalIdContainsFold applies the ContainsFold predicate on the "externalId" field.
func ExternalIdContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldExternalId, v))
}

// RequestIdEQ applies the EQ predicate on the "requestId" field.
func RequestIdEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldRequestId, v))
}

// RequestIdNEQ applies the NEQ predicate on the "requestId" field.
func RequestIdNEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldRequestId, v))
}

// RequestIdIn applies the In predicate on the "requestId" field.
func RequestIdIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldRequestId, vs...))
}

// RequestIdNotIn applies the NotIn predicate on the "requestId" field.
func RequestIdNotIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldRequestId, vs...))
}

// ScenarioIdEQ applies the EQ predicate on the "scenarioId" field.
func ScenarioIdEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldScenarioId, v))
}

// ScenarioIdNEQ applies the NEQ predicate on the "scenarioId" field.
func ScenarioIdNEQ(v uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldScenarioId, v))
}

// ScenarioIdIn applies the In predicate on the "scenarioId" field.
func ScenarioIdIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldScenarioId, vs...))
}

// ScenarioIdNotIn applies the NotIn predicate on the "scenarioId" field.
func ScenarioIdNotIn(vs ...uuid.UUID) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldScenarioId, vs...))
}

// FromEQ applies the EQ predicate on the "from" field.
func FromEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldFrom, v))
}

// FromNEQ applies the NEQ predicate on the "from" field.
func FromNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldFrom, v))
}

// FromIn applies the In predicate on the "from" field.
func FromIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldFrom, vs...))
}

// FromNotIn applies the NotIn predicate on the "from" field.
func FromNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldFrom, vs...))
}

// FromGT applies the GT predicate on the "from" field.
func FromGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldFrom, v))
}

// FromGTE applies the GTE predicate on the "from" field.
func FromGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldFrom, v))
}

// FromLT applies the LT predicate on the "from" field.
func FromLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldFrom, v))
}

// FromLTE applies the LTE predicate on the "from" field.
func FromLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldFrom, v))
}

// FromContains applies the Contains predicate on the "from" field.
func FromContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldFrom, v))
}

// FromHasPrefix applies the HasPrefix predicate on the "from" field.
func FromHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldFrom, v))
}

// FromHasSuffix applies the HasSuffix predicate on the "from" field.
func FromHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldFrom, v))
}

// FromIsNil applies the IsNil predicate on the "from" field.
func FromIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldFrom))
}

// FromNotNil applies the NotNil predicate on the "from" field.
func FromNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldFrom))
}

// FromEqualFold applies the EqualFold predicate on the "from" field.
func FromEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldFrom, v))
}

// FromContainsFold applies the ContainsFold predicate on the "from" field.
func FromContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldFrom, v))
}

// SubjectEQ applies the EQ predicate on the "subject" field.
func SubjectEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldSubject, v))
}

// SubjectNEQ applies the NEQ predicate on the "subject" field.
func SubjectNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldSubject, v))
}

// SubjectIn applies the In predicate on the "subject" field.
func SubjectIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldSubject, vs...))
}

// SubjectNotIn applies the NotIn predicate on the "subject" field.
func SubjectNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldSubject, vs...))
}

// SubjectGT applies the GT predicate on the "subject" field.
func SubjectGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldSubject, v))
}

// SubjectGTE applies the GTE predicate on the "subject" field.
func SubjectGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldSubject, v))
}

// SubjectLT applies the LT predicate on the "subject" field.
func SubjectLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldSubject, v))
}

// SubjectLTE applies the LTE predicate on the "subject" field.
func SubjectLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldSubject, v))
}

// SubjectContains applies the Contains predicate on the "subject" field.
func SubjectContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldSubject, v))
}

// SubjectHasPrefix applies the HasPrefix predicate on the "subject" field.
func SubjectHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldSubject, v))
}

// SubjectHasSuffix applies the HasSuffix predicate on the "subject" field.
func SubjectHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldSubject, v))
}

// SubjectIsNil applies the IsNil predicate on the "subject" field.
func SubjectIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldSubject))
}

// SubjectNotNil applies the NotNil predicate on the "subject" field.
func SubjectNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldSubject))
}

// SubjectEqualFold applies the EqualFold predicate on the "subject" field.
func SubjectEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldSubject, v))
}

// SubjectContainsFold applies the ContainsFold predicate on the "subject" field.
func SubjectContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldSubject, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Response {
	return predicate.Response(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Response {
	return predicate.Response(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Response {
	return predicate.Response(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Response {
	return predicate.Response(sql.FieldContainsFold(FieldBody, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Response {
	return predicate.Response(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Response {
	return predicate.Response(sql.FieldLTE(FieldDate, v))
}

// DateIsNil applies the IsNil predicate on the "date" field.
func DateIsNil() predicate.Response {
	return predicate.Response(sql.FieldIsNull(FieldDate))
}

// DateNotNil applies the NotNil predicate on the "date" field.
func DateNotNil() predicate.Response {
	return predicate.Response(sql.FieldNotNull(FieldDate))
}

// HasRequest applies the HasEdge predicate on the "request" edge.
func HasRequest() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestWith applies the HasEdge predicate on the "request" edge with a given conditions (other predicates).
func HasRequestWith(preds ...predicate.Request) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newRequestStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScenario applies the HasEdge predicate on the "scenario" edge.
func HasScenario() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScenarioTable, ScenarioColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScenarioWith applies the HasEdge predicate on the "scenario" edge with a given conditions (other predicates).
func HasScenarioWith(preds ...predicate.Scenario) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newScenarioStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvaluations applies the HasEdge predicate on the "evaluations" edge.
func HasEvaluations() predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EvaluationsTable, EvaluationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvaluationsWith applies the HasEdge predicate on the "evaluations" edge with a given conditions (other predicates).
func HasEvaluationsWith(preds ...predicate.Evaluation) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		step := newEvaluationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Response) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Response) predicate.Response {
	return predicate.Response(func(s *sql.Selector) {
		p(s.Not())
	})
}
