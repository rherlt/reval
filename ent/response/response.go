// Code generated by ent, DO NOT EDIT.

package response

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the response type in the database.
	Label = "response"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExternalId holds the string denoting the externalid field in the database.
	FieldExternalId = "external_id"
	// FieldRequestId holds the string denoting the requestid field in the database.
	FieldRequestId = "request_id"
	// FieldScenarioId holds the string denoting the scenarioid field in the database.
	FieldScenarioId = "scenario_id"
	// FieldFrom holds the string denoting the from field in the database.
	FieldFrom = "from"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// EdgeRequest holds the string denoting the request edge name in mutations.
	EdgeRequest = "request"
	// EdgeScenario holds the string denoting the scenario edge name in mutations.
	EdgeScenario = "scenario"
	// EdgeEvaluations holds the string denoting the evaluations edge name in mutations.
	EdgeEvaluations = "evaluations"
	// Table holds the table name of the response in the database.
	Table = "responses"
	// RequestTable is the table that holds the request relation/edge.
	RequestTable = "responses"
	// RequestInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestInverseTable = "requests"
	// RequestColumn is the table column denoting the request relation/edge.
	RequestColumn = "request_id"
	// ScenarioTable is the table that holds the scenario relation/edge.
	ScenarioTable = "responses"
	// ScenarioInverseTable is the table name for the Scenario entity.
	// It exists in this package in order to avoid circular dependency with the "scenario" package.
	ScenarioInverseTable = "scenarios"
	// ScenarioColumn is the table column denoting the scenario relation/edge.
	ScenarioColumn = "scenario_id"
	// EvaluationsTable is the table that holds the evaluations relation/edge.
	EvaluationsTable = "evaluations"
	// EvaluationsInverseTable is the table name for the Evaluation entity.
	// It exists in this package in order to avoid circular dependency with the "evaluation" package.
	EvaluationsInverseTable = "evaluations"
	// EvaluationsColumn is the table column denoting the evaluations relation/edge.
	EvaluationsColumn = "response_id"
)

// Columns holds all SQL columns for response fields.
var Columns = []string{
	FieldID,
	FieldExternalId,
	FieldRequestId,
	FieldScenarioId,
	FieldFrom,
	FieldSubject,
	FieldBody,
	FieldDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Response queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExternalId orders the results by the externalId field.
func ByExternalId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalId, opts...).ToFunc()
}

// ByRequestId orders the results by the requestId field.
func ByRequestId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestId, opts...).ToFunc()
}

// ByScenarioId orders the results by the scenarioId field.
func ByScenarioId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScenarioId, opts...).ToFunc()
}

// ByFrom orders the results by the from field.
func ByFrom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrom, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByRequestField orders the results by request field.
func ByRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestStep(), sql.OrderByField(field, opts...))
	}
}

// ByScenarioField orders the results by scenario field.
func ByScenarioField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScenarioStep(), sql.OrderByField(field, opts...))
	}
}

// ByEvaluationsCount orders the results by evaluations count.
func ByEvaluationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvaluationsStep(), opts...)
	}
}

// ByEvaluations orders the results by evaluations terms.
func ByEvaluations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvaluationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequestTable, RequestColumn),
	)
}
func newScenarioStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScenarioInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScenarioTable, ScenarioColumn),
	)
}
func newEvaluationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvaluationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EvaluationsTable, EvaluationsColumn),
	)
}
