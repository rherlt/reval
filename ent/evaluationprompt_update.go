// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/evaluationprompt"
	"github.com/rherlt/reval/ent/predicate"
)

// EvaluationPromptUpdate is the builder for updating EvaluationPrompt entities.
type EvaluationPromptUpdate struct {
	config
	hooks    []Hook
	mutation *EvaluationPromptMutation
}

// Where appends a list predicates to the EvaluationPromptUpdate builder.
func (epu *EvaluationPromptUpdate) Where(ps ...predicate.EvaluationPrompt) *EvaluationPromptUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetPrompt sets the "prompt" field.
func (epu *EvaluationPromptUpdate) SetPrompt(s string) *EvaluationPromptUpdate {
	epu.mutation.SetPrompt(s)
	return epu
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (epu *EvaluationPromptUpdate) AddEvaluationIDs(ids ...uuid.UUID) *EvaluationPromptUpdate {
	epu.mutation.AddEvaluationIDs(ids...)
	return epu
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (epu *EvaluationPromptUpdate) AddEvaluations(e ...*Evaluation) *EvaluationPromptUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEvaluationIDs(ids...)
}

// Mutation returns the EvaluationPromptMutation object of the builder.
func (epu *EvaluationPromptUpdate) Mutation() *EvaluationPromptMutation {
	return epu.mutation
}

// ClearEvaluations clears all "evaluations" edges to the Evaluation entity.
func (epu *EvaluationPromptUpdate) ClearEvaluations() *EvaluationPromptUpdate {
	epu.mutation.ClearEvaluations()
	return epu
}

// RemoveEvaluationIDs removes the "evaluations" edge to Evaluation entities by IDs.
func (epu *EvaluationPromptUpdate) RemoveEvaluationIDs(ids ...uuid.UUID) *EvaluationPromptUpdate {
	epu.mutation.RemoveEvaluationIDs(ids...)
	return epu
}

// RemoveEvaluations removes "evaluations" edges to Evaluation entities.
func (epu *EvaluationPromptUpdate) RemoveEvaluations(e ...*Evaluation) *EvaluationPromptUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEvaluationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EvaluationPromptUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EvaluationPromptUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EvaluationPromptUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EvaluationPromptUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epu *EvaluationPromptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(evaluationprompt.Table, evaluationprompt.Columns, sqlgraph.NewFieldSpec(evaluationprompt.FieldID, field.TypeUUID))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.Prompt(); ok {
		_spec.SetField(evaluationprompt.FieldPrompt, field.TypeString, value)
	}
	if epu.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEvaluationsIDs(); len(nodes) > 0 && !epu.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evaluationprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EvaluationPromptUpdateOne is the builder for updating a single EvaluationPrompt entity.
type EvaluationPromptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EvaluationPromptMutation
}

// SetPrompt sets the "prompt" field.
func (epuo *EvaluationPromptUpdateOne) SetPrompt(s string) *EvaluationPromptUpdateOne {
	epuo.mutation.SetPrompt(s)
	return epuo
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (epuo *EvaluationPromptUpdateOne) AddEvaluationIDs(ids ...uuid.UUID) *EvaluationPromptUpdateOne {
	epuo.mutation.AddEvaluationIDs(ids...)
	return epuo
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (epuo *EvaluationPromptUpdateOne) AddEvaluations(e ...*Evaluation) *EvaluationPromptUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEvaluationIDs(ids...)
}

// Mutation returns the EvaluationPromptMutation object of the builder.
func (epuo *EvaluationPromptUpdateOne) Mutation() *EvaluationPromptMutation {
	return epuo.mutation
}

// ClearEvaluations clears all "evaluations" edges to the Evaluation entity.
func (epuo *EvaluationPromptUpdateOne) ClearEvaluations() *EvaluationPromptUpdateOne {
	epuo.mutation.ClearEvaluations()
	return epuo
}

// RemoveEvaluationIDs removes the "evaluations" edge to Evaluation entities by IDs.
func (epuo *EvaluationPromptUpdateOne) RemoveEvaluationIDs(ids ...uuid.UUID) *EvaluationPromptUpdateOne {
	epuo.mutation.RemoveEvaluationIDs(ids...)
	return epuo
}

// RemoveEvaluations removes "evaluations" edges to Evaluation entities.
func (epuo *EvaluationPromptUpdateOne) RemoveEvaluations(e ...*Evaluation) *EvaluationPromptUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEvaluationIDs(ids...)
}

// Where appends a list predicates to the EvaluationPromptUpdate builder.
func (epuo *EvaluationPromptUpdateOne) Where(ps ...predicate.EvaluationPrompt) *EvaluationPromptUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EvaluationPromptUpdateOne) Select(field string, fields ...string) *EvaluationPromptUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EvaluationPrompt entity.
func (epuo *EvaluationPromptUpdateOne) Save(ctx context.Context) (*EvaluationPrompt, error) {
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EvaluationPromptUpdateOne) SaveX(ctx context.Context) *EvaluationPrompt {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EvaluationPromptUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EvaluationPromptUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (epuo *EvaluationPromptUpdateOne) sqlSave(ctx context.Context) (_node *EvaluationPrompt, err error) {
	_spec := sqlgraph.NewUpdateSpec(evaluationprompt.Table, evaluationprompt.Columns, sqlgraph.NewFieldSpec(evaluationprompt.FieldID, field.TypeUUID))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EvaluationPrompt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evaluationprompt.FieldID)
		for _, f := range fields {
			if !evaluationprompt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != evaluationprompt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.Prompt(); ok {
		_spec.SetField(evaluationprompt.FieldPrompt, field.TypeString, value)
	}
	if epuo.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEvaluationsIDs(); len(nodes) > 0 && !epuo.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EvaluationPrompt{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evaluationprompt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
