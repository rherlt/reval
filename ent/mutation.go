// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/predicate"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/scenario"
	"github.com/rherlt/reval/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEvaluation = "Evaluation"
	TypeRequest    = "Request"
	TypeResponse   = "Response"
	TypeScenario   = "Scenario"
	TypeUser       = "User"
)

// EvaluationMutation represents an operation that mutates the Evaluation nodes in the graph.
type EvaluationMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	externalId       *string
	date             *time.Time
	evaluationResult *string
	clearedFields    map[string]struct{}
	user             *uuid.UUID
	cleareduser      bool
	response         *uuid.UUID
	clearedresponse  bool
	done             bool
	oldValue         func(context.Context) (*Evaluation, error)
	predicates       []predicate.Evaluation
}

var _ ent.Mutation = (*EvaluationMutation)(nil)

// evaluationOption allows management of the mutation configuration using functional options.
type evaluationOption func(*EvaluationMutation)

// newEvaluationMutation creates new mutation for the Evaluation entity.
func newEvaluationMutation(c config, op Op, opts ...evaluationOption) *EvaluationMutation {
	m := &EvaluationMutation{
		config:        c,
		op:            op,
		typ:           TypeEvaluation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEvaluationID sets the ID field of the mutation.
func withEvaluationID(id uuid.UUID) evaluationOption {
	return func(m *EvaluationMutation) {
		var (
			err   error
			once  sync.Once
			value *Evaluation
		)
		m.oldValue = func(ctx context.Context) (*Evaluation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Evaluation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvaluation sets the old Evaluation of the mutation.
func withEvaluation(node *Evaluation) evaluationOption {
	return func(m *EvaluationMutation) {
		m.oldValue = func(context.Context) (*Evaluation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EvaluationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EvaluationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Evaluation entities.
func (m *EvaluationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EvaluationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EvaluationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Evaluation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "userId" field.
func (m *EvaluationMutation) SetUserId(u uuid.UUID) {
	m.user = &u
}

// UserId returns the value of the "userId" field in the mutation.
func (m *EvaluationMutation) UserId() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "userId" field's value of the Evaluation entity.
// If the Evaluation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvaluationMutation) OldUserId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId resets all changes to the "userId" field.
func (m *EvaluationMutation) ResetUserId() {
	m.user = nil
}

// SetResponseId sets the "responseId" field.
func (m *EvaluationMutation) SetResponseId(u uuid.UUID) {
	m.response = &u
}

// ResponseId returns the value of the "responseId" field in the mutation.
func (m *EvaluationMutation) ResponseId() (r uuid.UUID, exists bool) {
	v := m.response
	if v == nil {
		return
	}
	return *v, true
}

// OldResponseId returns the old "responseId" field's value of the Evaluation entity.
// If the Evaluation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvaluationMutation) OldResponseId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponseId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponseId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponseId: %w", err)
	}
	return oldValue.ResponseId, nil
}

// ResetResponseId resets all changes to the "responseId" field.
func (m *EvaluationMutation) ResetResponseId() {
	m.response = nil
}

// SetExternalId sets the "externalId" field.
func (m *EvaluationMutation) SetExternalId(s string) {
	m.externalId = &s
}

// ExternalId returns the value of the "externalId" field in the mutation.
func (m *EvaluationMutation) ExternalId() (r string, exists bool) {
	v := m.externalId
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalId returns the old "externalId" field's value of the Evaluation entity.
// If the Evaluation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvaluationMutation) OldExternalId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalId: %w", err)
	}
	return oldValue.ExternalId, nil
}

// ClearExternalId clears the value of the "externalId" field.
func (m *EvaluationMutation) ClearExternalId() {
	m.externalId = nil
	m.clearedFields[evaluation.FieldExternalId] = struct{}{}
}

// ExternalIdCleared returns if the "externalId" field was cleared in this mutation.
func (m *EvaluationMutation) ExternalIdCleared() bool {
	_, ok := m.clearedFields[evaluation.FieldExternalId]
	return ok
}

// ResetExternalId resets all changes to the "externalId" field.
func (m *EvaluationMutation) ResetExternalId() {
	m.externalId = nil
	delete(m.clearedFields, evaluation.FieldExternalId)
}

// SetDate sets the "date" field.
func (m *EvaluationMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *EvaluationMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Evaluation entity.
// If the Evaluation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvaluationMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *EvaluationMutation) ClearDate() {
	m.date = nil
	m.clearedFields[evaluation.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *EvaluationMutation) DateCleared() bool {
	_, ok := m.clearedFields[evaluation.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *EvaluationMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, evaluation.FieldDate)
}

// SetEvaluationResult sets the "evaluationResult" field.
func (m *EvaluationMutation) SetEvaluationResult(s string) {
	m.evaluationResult = &s
}

// EvaluationResult returns the value of the "evaluationResult" field in the mutation.
func (m *EvaluationMutation) EvaluationResult() (r string, exists bool) {
	v := m.evaluationResult
	if v == nil {
		return
	}
	return *v, true
}

// OldEvaluationResult returns the old "evaluationResult" field's value of the Evaluation entity.
// If the Evaluation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EvaluationMutation) OldEvaluationResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvaluationResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvaluationResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvaluationResult: %w", err)
	}
	return oldValue.EvaluationResult, nil
}

// ResetEvaluationResult resets all changes to the "evaluationResult" field.
func (m *EvaluationMutation) ResetEvaluationResult() {
	m.evaluationResult = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *EvaluationMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *EvaluationMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *EvaluationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *EvaluationMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EvaluationMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EvaluationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetResponseID sets the "response" edge to the Response entity by id.
func (m *EvaluationMutation) SetResponseID(id uuid.UUID) {
	m.response = &id
}

// ClearResponse clears the "response" edge to the Response entity.
func (m *EvaluationMutation) ClearResponse() {
	m.clearedresponse = true
}

// ResponseCleared reports if the "response" edge to the Response entity was cleared.
func (m *EvaluationMutation) ResponseCleared() bool {
	return m.clearedresponse
}

// ResponseID returns the "response" edge ID in the mutation.
func (m *EvaluationMutation) ResponseID() (id uuid.UUID, exists bool) {
	if m.response != nil {
		return *m.response, true
	}
	return
}

// ResponseIDs returns the "response" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResponseID instead. It exists only for internal usage by the builders.
func (m *EvaluationMutation) ResponseIDs() (ids []uuid.UUID) {
	if id := m.response; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResponse resets all changes to the "response" edge.
func (m *EvaluationMutation) ResetResponse() {
	m.response = nil
	m.clearedresponse = false
}

// Where appends a list predicates to the EvaluationMutation builder.
func (m *EvaluationMutation) Where(ps ...predicate.Evaluation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EvaluationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EvaluationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Evaluation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EvaluationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EvaluationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Evaluation).
func (m *EvaluationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EvaluationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user != nil {
		fields = append(fields, evaluation.FieldUserId)
	}
	if m.response != nil {
		fields = append(fields, evaluation.FieldResponseId)
	}
	if m.externalId != nil {
		fields = append(fields, evaluation.FieldExternalId)
	}
	if m.date != nil {
		fields = append(fields, evaluation.FieldDate)
	}
	if m.evaluationResult != nil {
		fields = append(fields, evaluation.FieldEvaluationResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EvaluationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case evaluation.FieldUserId:
		return m.UserId()
	case evaluation.FieldResponseId:
		return m.ResponseId()
	case evaluation.FieldExternalId:
		return m.ExternalId()
	case evaluation.FieldDate:
		return m.Date()
	case evaluation.FieldEvaluationResult:
		return m.EvaluationResult()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EvaluationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case evaluation.FieldUserId:
		return m.OldUserId(ctx)
	case evaluation.FieldResponseId:
		return m.OldResponseId(ctx)
	case evaluation.FieldExternalId:
		return m.OldExternalId(ctx)
	case evaluation.FieldDate:
		return m.OldDate(ctx)
	case evaluation.FieldEvaluationResult:
		return m.OldEvaluationResult(ctx)
	}
	return nil, fmt.Errorf("unknown Evaluation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvaluationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case evaluation.FieldUserId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case evaluation.FieldResponseId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponseId(v)
		return nil
	case evaluation.FieldExternalId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalId(v)
		return nil
	case evaluation.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case evaluation.FieldEvaluationResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvaluationResult(v)
		return nil
	}
	return fmt.Errorf("unknown Evaluation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EvaluationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EvaluationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EvaluationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Evaluation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EvaluationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(evaluation.FieldExternalId) {
		fields = append(fields, evaluation.FieldExternalId)
	}
	if m.FieldCleared(evaluation.FieldDate) {
		fields = append(fields, evaluation.FieldDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EvaluationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EvaluationMutation) ClearField(name string) error {
	switch name {
	case evaluation.FieldExternalId:
		m.ClearExternalId()
		return nil
	case evaluation.FieldDate:
		m.ClearDate()
		return nil
	}
	return fmt.Errorf("unknown Evaluation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EvaluationMutation) ResetField(name string) error {
	switch name {
	case evaluation.FieldUserId:
		m.ResetUserId()
		return nil
	case evaluation.FieldResponseId:
		m.ResetResponseId()
		return nil
	case evaluation.FieldExternalId:
		m.ResetExternalId()
		return nil
	case evaluation.FieldDate:
		m.ResetDate()
		return nil
	case evaluation.FieldEvaluationResult:
		m.ResetEvaluationResult()
		return nil
	}
	return fmt.Errorf("unknown Evaluation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EvaluationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, evaluation.EdgeUser)
	}
	if m.response != nil {
		edges = append(edges, evaluation.EdgeResponse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EvaluationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case evaluation.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case evaluation.EdgeResponse:
		if id := m.response; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EvaluationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EvaluationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EvaluationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, evaluation.EdgeUser)
	}
	if m.clearedresponse {
		edges = append(edges, evaluation.EdgeResponse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EvaluationMutation) EdgeCleared(name string) bool {
	switch name {
	case evaluation.EdgeUser:
		return m.cleareduser
	case evaluation.EdgeResponse:
		return m.clearedresponse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EvaluationMutation) ClearEdge(name string) error {
	switch name {
	case evaluation.EdgeUser:
		m.ClearUser()
		return nil
	case evaluation.EdgeResponse:
		m.ClearResponse()
		return nil
	}
	return fmt.Errorf("unknown Evaluation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EvaluationMutation) ResetEdge(name string) error {
	switch name {
	case evaluation.EdgeUser:
		m.ResetUser()
		return nil
	case evaluation.EdgeResponse:
		m.ResetResponse()
		return nil
	}
	return fmt.Errorf("unknown Evaluation edge %s", name)
}

// RequestMutation represents an operation that mutates the Request nodes in the graph.
type RequestMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	externalId       *string
	from             *string
	subject          *string
	body             *string
	date             *time.Time
	clearedFields    map[string]struct{}
	responses        map[uuid.UUID]struct{}
	removedresponses map[uuid.UUID]struct{}
	clearedresponses bool
	done             bool
	oldValue         func(context.Context) (*Request, error)
	predicates       []predicate.Request
}

var _ ent.Mutation = (*RequestMutation)(nil)

// requestOption allows management of the mutation configuration using functional options.
type requestOption func(*RequestMutation)

// newRequestMutation creates new mutation for the Request entity.
func newRequestMutation(c config, op Op, opts ...requestOption) *RequestMutation {
	m := &RequestMutation{
		config:        c,
		op:            op,
		typ:           TypeRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequestID sets the ID field of the mutation.
func withRequestID(id uuid.UUID) requestOption {
	return func(m *RequestMutation) {
		var (
			err   error
			once  sync.Once
			value *Request
		)
		m.oldValue = func(ctx context.Context) (*Request, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Request.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequest sets the old Request of the mutation.
func withRequest(node *Request) requestOption {
	return func(m *RequestMutation) {
		m.oldValue = func(context.Context) (*Request, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Request entities.
func (m *RequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Request.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExternalId sets the "externalId" field.
func (m *RequestMutation) SetExternalId(s string) {
	m.externalId = &s
}

// ExternalId returns the value of the "externalId" field in the mutation.
func (m *RequestMutation) ExternalId() (r string, exists bool) {
	v := m.externalId
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalId returns the old "externalId" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldExternalId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalId: %w", err)
	}
	return oldValue.ExternalId, nil
}

// ClearExternalId clears the value of the "externalId" field.
func (m *RequestMutation) ClearExternalId() {
	m.externalId = nil
	m.clearedFields[request.FieldExternalId] = struct{}{}
}

// ExternalIdCleared returns if the "externalId" field was cleared in this mutation.
func (m *RequestMutation) ExternalIdCleared() bool {
	_, ok := m.clearedFields[request.FieldExternalId]
	return ok
}

// ResetExternalId resets all changes to the "externalId" field.
func (m *RequestMutation) ResetExternalId() {
	m.externalId = nil
	delete(m.clearedFields, request.FieldExternalId)
}

// SetFrom sets the "from" field.
func (m *RequestMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *RequestMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ClearFrom clears the value of the "from" field.
func (m *RequestMutation) ClearFrom() {
	m.from = nil
	m.clearedFields[request.FieldFrom] = struct{}{}
}

// FromCleared returns if the "from" field was cleared in this mutation.
func (m *RequestMutation) FromCleared() bool {
	_, ok := m.clearedFields[request.FieldFrom]
	return ok
}

// ResetFrom resets all changes to the "from" field.
func (m *RequestMutation) ResetFrom() {
	m.from = nil
	delete(m.clearedFields, request.FieldFrom)
}

// SetSubject sets the "subject" field.
func (m *RequestMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *RequestMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *RequestMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[request.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *RequestMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[request.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *RequestMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, request.FieldSubject)
}

// SetBody sets the "body" field.
func (m *RequestMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *RequestMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *RequestMutation) ResetBody() {
	m.body = nil
}

// SetDate sets the "date" field.
func (m *RequestMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *RequestMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Request entity.
// If the Request object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RequestMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *RequestMutation) ClearDate() {
	m.date = nil
	m.clearedFields[request.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *RequestMutation) DateCleared() bool {
	_, ok := m.clearedFields[request.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *RequestMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, request.FieldDate)
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *RequestMutation) AddResponseIDs(ids ...uuid.UUID) {
	if m.responses == nil {
		m.responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *RequestMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared reports if the "responses" edge to the Response entity was cleared.
func (m *RequestMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *RequestMutation) RemoveResponseIDs(ids ...uuid.UUID) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.responses, ids[i])
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *RequestMutation) RemovedResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *RequestMutation) ResponsesIDs() (ids []uuid.UUID) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *RequestMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// Where appends a list predicates to the RequestMutation builder.
func (m *RequestMutation) Where(ps ...predicate.Request) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Request, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Request).
func (m *RequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RequestMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.externalId != nil {
		fields = append(fields, request.FieldExternalId)
	}
	if m.from != nil {
		fields = append(fields, request.FieldFrom)
	}
	if m.subject != nil {
		fields = append(fields, request.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, request.FieldBody)
	}
	if m.date != nil {
		fields = append(fields, request.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case request.FieldExternalId:
		return m.ExternalId()
	case request.FieldFrom:
		return m.From()
	case request.FieldSubject:
		return m.Subject()
	case request.FieldBody:
		return m.Body()
	case request.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case request.FieldExternalId:
		return m.OldExternalId(ctx)
	case request.FieldFrom:
		return m.OldFrom(ctx)
	case request.FieldSubject:
		return m.OldSubject(ctx)
	case request.FieldBody:
		return m.OldBody(ctx)
	case request.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Request field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case request.FieldExternalId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalId(v)
		return nil
	case request.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case request.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case request.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case request.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Request numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(request.FieldExternalId) {
		fields = append(fields, request.FieldExternalId)
	}
	if m.FieldCleared(request.FieldFrom) {
		fields = append(fields, request.FieldFrom)
	}
	if m.FieldCleared(request.FieldSubject) {
		fields = append(fields, request.FieldSubject)
	}
	if m.FieldCleared(request.FieldDate) {
		fields = append(fields, request.FieldDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequestMutation) ClearField(name string) error {
	switch name {
	case request.FieldExternalId:
		m.ClearExternalId()
		return nil
	case request.FieldFrom:
		m.ClearFrom()
		return nil
	case request.FieldSubject:
		m.ClearSubject()
		return nil
	case request.FieldDate:
		m.ClearDate()
		return nil
	}
	return fmt.Errorf("unknown Request nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RequestMutation) ResetField(name string) error {
	switch name {
	case request.FieldExternalId:
		m.ResetExternalId()
		return nil
	case request.FieldFrom:
		m.ResetFrom()
		return nil
	case request.FieldSubject:
		m.ResetSubject()
		return nil
	case request.FieldBody:
		m.ResetBody()
		return nil
	case request.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Request field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.responses != nil {
		edges = append(edges, request.EdgeResponses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case request.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedresponses != nil {
		edges = append(edges, request.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case request.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedresponses {
		edges = append(edges, request.EdgeResponses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RequestMutation) EdgeCleared(name string) bool {
	switch name {
	case request.EdgeResponses:
		return m.clearedresponses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RequestMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Request unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RequestMutation) ResetEdge(name string) error {
	switch name {
	case request.EdgeResponses:
		m.ResetResponses()
		return nil
	}
	return fmt.Errorf("unknown Request edge %s", name)
}

// ResponseMutation represents an operation that mutates the Response nodes in the graph.
type ResponseMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	externalId         *string
	from               *string
	subject            *string
	body               *string
	date               *time.Time
	clearedFields      map[string]struct{}
	request            *uuid.UUID
	clearedrequest     bool
	scenario           *uuid.UUID
	clearedscenario    bool
	evaluations        map[uuid.UUID]struct{}
	removedevaluations map[uuid.UUID]struct{}
	clearedevaluations bool
	done               bool
	oldValue           func(context.Context) (*Response, error)
	predicates         []predicate.Response
}

var _ ent.Mutation = (*ResponseMutation)(nil)

// responseOption allows management of the mutation configuration using functional options.
type responseOption func(*ResponseMutation)

// newResponseMutation creates new mutation for the Response entity.
func newResponseMutation(c config, op Op, opts ...responseOption) *ResponseMutation {
	m := &ResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResponseID sets the ID field of the mutation.
func withResponseID(id uuid.UUID) responseOption {
	return func(m *ResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *Response
		)
		m.oldValue = func(ctx context.Context) (*Response, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Response.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResponse sets the old Response of the mutation.
func withResponse(node *Response) responseOption {
	return func(m *ResponseMutation) {
		m.oldValue = func(context.Context) (*Response, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Response entities.
func (m *ResponseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ResponseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ResponseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Response.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExternalId sets the "externalId" field.
func (m *ResponseMutation) SetExternalId(s string) {
	m.externalId = &s
}

// ExternalId returns the value of the "externalId" field in the mutation.
func (m *ResponseMutation) ExternalId() (r string, exists bool) {
	v := m.externalId
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalId returns the old "externalId" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldExternalId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalId: %w", err)
	}
	return oldValue.ExternalId, nil
}

// ClearExternalId clears the value of the "externalId" field.
func (m *ResponseMutation) ClearExternalId() {
	m.externalId = nil
	m.clearedFields[response.FieldExternalId] = struct{}{}
}

// ExternalIdCleared returns if the "externalId" field was cleared in this mutation.
func (m *ResponseMutation) ExternalIdCleared() bool {
	_, ok := m.clearedFields[response.FieldExternalId]
	return ok
}

// ResetExternalId resets all changes to the "externalId" field.
func (m *ResponseMutation) ResetExternalId() {
	m.externalId = nil
	delete(m.clearedFields, response.FieldExternalId)
}

// SetRequestId sets the "requestId" field.
func (m *ResponseMutation) SetRequestId(u uuid.UUID) {
	m.request = &u
}

// RequestId returns the value of the "requestId" field in the mutation.
func (m *ResponseMutation) RequestId() (r uuid.UUID, exists bool) {
	v := m.request
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestId returns the old "requestId" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldRequestId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestId: %w", err)
	}
	return oldValue.RequestId, nil
}

// ResetRequestId resets all changes to the "requestId" field.
func (m *ResponseMutation) ResetRequestId() {
	m.request = nil
}

// SetScenarioId sets the "scenarioId" field.
func (m *ResponseMutation) SetScenarioId(u uuid.UUID) {
	m.scenario = &u
}

// ScenarioId returns the value of the "scenarioId" field in the mutation.
func (m *ResponseMutation) ScenarioId() (r uuid.UUID, exists bool) {
	v := m.scenario
	if v == nil {
		return
	}
	return *v, true
}

// OldScenarioId returns the old "scenarioId" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldScenarioId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScenarioId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScenarioId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScenarioId: %w", err)
	}
	return oldValue.ScenarioId, nil
}

// ResetScenarioId resets all changes to the "scenarioId" field.
func (m *ResponseMutation) ResetScenarioId() {
	m.scenario = nil
}

// SetFrom sets the "from" field.
func (m *ResponseMutation) SetFrom(s string) {
	m.from = &s
}

// From returns the value of the "from" field in the mutation.
func (m *ResponseMutation) From() (r string, exists bool) {
	v := m.from
	if v == nil {
		return
	}
	return *v, true
}

// OldFrom returns the old "from" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldFrom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrom: %w", err)
	}
	return oldValue.From, nil
}

// ClearFrom clears the value of the "from" field.
func (m *ResponseMutation) ClearFrom() {
	m.from = nil
	m.clearedFields[response.FieldFrom] = struct{}{}
}

// FromCleared returns if the "from" field was cleared in this mutation.
func (m *ResponseMutation) FromCleared() bool {
	_, ok := m.clearedFields[response.FieldFrom]
	return ok
}

// ResetFrom resets all changes to the "from" field.
func (m *ResponseMutation) ResetFrom() {
	m.from = nil
	delete(m.clearedFields, response.FieldFrom)
}

// SetSubject sets the "subject" field.
func (m *ResponseMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *ResponseMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *ResponseMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[response.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *ResponseMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[response.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *ResponseMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, response.FieldSubject)
}

// SetBody sets the "body" field.
func (m *ResponseMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *ResponseMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *ResponseMutation) ResetBody() {
	m.body = nil
}

// SetDate sets the "date" field.
func (m *ResponseMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ResponseMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *ResponseMutation) ClearDate() {
	m.date = nil
	m.clearedFields[response.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *ResponseMutation) DateCleared() bool {
	_, ok := m.clearedFields[response.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *ResponseMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, response.FieldDate)
}

// SetRequestID sets the "request" edge to the Request entity by id.
func (m *ResponseMutation) SetRequestID(id uuid.UUID) {
	m.request = &id
}

// ClearRequest clears the "request" edge to the Request entity.
func (m *ResponseMutation) ClearRequest() {
	m.clearedrequest = true
}

// RequestCleared reports if the "request" edge to the Request entity was cleared.
func (m *ResponseMutation) RequestCleared() bool {
	return m.clearedrequest
}

// RequestID returns the "request" edge ID in the mutation.
func (m *ResponseMutation) RequestID() (id uuid.UUID, exists bool) {
	if m.request != nil {
		return *m.request, true
	}
	return
}

// RequestIDs returns the "request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RequestID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) RequestIDs() (ids []uuid.UUID) {
	if id := m.request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRequest resets all changes to the "request" edge.
func (m *ResponseMutation) ResetRequest() {
	m.request = nil
	m.clearedrequest = false
}

// SetScenarioID sets the "scenario" edge to the Scenario entity by id.
func (m *ResponseMutation) SetScenarioID(id uuid.UUID) {
	m.scenario = &id
}

// ClearScenario clears the "scenario" edge to the Scenario entity.
func (m *ResponseMutation) ClearScenario() {
	m.clearedscenario = true
}

// ScenarioCleared reports if the "scenario" edge to the Scenario entity was cleared.
func (m *ResponseMutation) ScenarioCleared() bool {
	return m.clearedscenario
}

// ScenarioID returns the "scenario" edge ID in the mutation.
func (m *ResponseMutation) ScenarioID() (id uuid.UUID, exists bool) {
	if m.scenario != nil {
		return *m.scenario, true
	}
	return
}

// ScenarioIDs returns the "scenario" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScenarioID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) ScenarioIDs() (ids []uuid.UUID) {
	if id := m.scenario; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScenario resets all changes to the "scenario" edge.
func (m *ResponseMutation) ResetScenario() {
	m.scenario = nil
	m.clearedscenario = false
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by ids.
func (m *ResponseMutation) AddEvaluationIDs(ids ...uuid.UUID) {
	if m.evaluations == nil {
		m.evaluations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.evaluations[ids[i]] = struct{}{}
	}
}

// ClearEvaluations clears the "evaluations" edge to the Evaluation entity.
func (m *ResponseMutation) ClearEvaluations() {
	m.clearedevaluations = true
}

// EvaluationsCleared reports if the "evaluations" edge to the Evaluation entity was cleared.
func (m *ResponseMutation) EvaluationsCleared() bool {
	return m.clearedevaluations
}

// RemoveEvaluationIDs removes the "evaluations" edge to the Evaluation entity by IDs.
func (m *ResponseMutation) RemoveEvaluationIDs(ids ...uuid.UUID) {
	if m.removedevaluations == nil {
		m.removedevaluations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.evaluations, ids[i])
		m.removedevaluations[ids[i]] = struct{}{}
	}
}

// RemovedEvaluations returns the removed IDs of the "evaluations" edge to the Evaluation entity.
func (m *ResponseMutation) RemovedEvaluationsIDs() (ids []uuid.UUID) {
	for id := range m.removedevaluations {
		ids = append(ids, id)
	}
	return
}

// EvaluationsIDs returns the "evaluations" edge IDs in the mutation.
func (m *ResponseMutation) EvaluationsIDs() (ids []uuid.UUID) {
	for id := range m.evaluations {
		ids = append(ids, id)
	}
	return
}

// ResetEvaluations resets all changes to the "evaluations" edge.
func (m *ResponseMutation) ResetEvaluations() {
	m.evaluations = nil
	m.clearedevaluations = false
	m.removedevaluations = nil
}

// Where appends a list predicates to the ResponseMutation builder.
func (m *ResponseMutation) Where(ps ...predicate.Response) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Response, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Response).
func (m *ResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResponseMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.externalId != nil {
		fields = append(fields, response.FieldExternalId)
	}
	if m.request != nil {
		fields = append(fields, response.FieldRequestId)
	}
	if m.scenario != nil {
		fields = append(fields, response.FieldScenarioId)
	}
	if m.from != nil {
		fields = append(fields, response.FieldFrom)
	}
	if m.subject != nil {
		fields = append(fields, response.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, response.FieldBody)
	}
	if m.date != nil {
		fields = append(fields, response.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case response.FieldExternalId:
		return m.ExternalId()
	case response.FieldRequestId:
		return m.RequestId()
	case response.FieldScenarioId:
		return m.ScenarioId()
	case response.FieldFrom:
		return m.From()
	case response.FieldSubject:
		return m.Subject()
	case response.FieldBody:
		return m.Body()
	case response.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case response.FieldExternalId:
		return m.OldExternalId(ctx)
	case response.FieldRequestId:
		return m.OldRequestId(ctx)
	case response.FieldScenarioId:
		return m.OldScenarioId(ctx)
	case response.FieldFrom:
		return m.OldFrom(ctx)
	case response.FieldSubject:
		return m.OldSubject(ctx)
	case response.FieldBody:
		return m.OldBody(ctx)
	case response.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Response field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case response.FieldExternalId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalId(v)
		return nil
	case response.FieldRequestId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestId(v)
		return nil
	case response.FieldScenarioId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScenarioId(v)
		return nil
	case response.FieldFrom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrom(v)
		return nil
	case response.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case response.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case response.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Response numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResponseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(response.FieldExternalId) {
		fields = append(fields, response.FieldExternalId)
	}
	if m.FieldCleared(response.FieldFrom) {
		fields = append(fields, response.FieldFrom)
	}
	if m.FieldCleared(response.FieldSubject) {
		fields = append(fields, response.FieldSubject)
	}
	if m.FieldCleared(response.FieldDate) {
		fields = append(fields, response.FieldDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResponseMutation) ClearField(name string) error {
	switch name {
	case response.FieldExternalId:
		m.ClearExternalId()
		return nil
	case response.FieldFrom:
		m.ClearFrom()
		return nil
	case response.FieldSubject:
		m.ClearSubject()
		return nil
	case response.FieldDate:
		m.ClearDate()
		return nil
	}
	return fmt.Errorf("unknown Response nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResponseMutation) ResetField(name string) error {
	switch name {
	case response.FieldExternalId:
		m.ResetExternalId()
		return nil
	case response.FieldRequestId:
		m.ResetRequestId()
		return nil
	case response.FieldScenarioId:
		m.ResetScenarioId()
		return nil
	case response.FieldFrom:
		m.ResetFrom()
		return nil
	case response.FieldSubject:
		m.ResetSubject()
		return nil
	case response.FieldBody:
		m.ResetBody()
		return nil
	case response.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.request != nil {
		edges = append(edges, response.EdgeRequest)
	}
	if m.scenario != nil {
		edges = append(edges, response.EdgeScenario)
	}
	if m.evaluations != nil {
		edges = append(edges, response.EdgeEvaluations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case response.EdgeRequest:
		if id := m.request; id != nil {
			return []ent.Value{*id}
		}
	case response.EdgeScenario:
		if id := m.scenario; id != nil {
			return []ent.Value{*id}
		}
	case response.EdgeEvaluations:
		ids := make([]ent.Value, 0, len(m.evaluations))
		for id := range m.evaluations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedevaluations != nil {
		edges = append(edges, response.EdgeEvaluations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case response.EdgeEvaluations:
		ids := make([]ent.Value, 0, len(m.removedevaluations))
		for id := range m.removedevaluations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrequest {
		edges = append(edges, response.EdgeRequest)
	}
	if m.clearedscenario {
		edges = append(edges, response.EdgeScenario)
	}
	if m.clearedevaluations {
		edges = append(edges, response.EdgeEvaluations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case response.EdgeRequest:
		return m.clearedrequest
	case response.EdgeScenario:
		return m.clearedscenario
	case response.EdgeEvaluations:
		return m.clearedevaluations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResponseMutation) ClearEdge(name string) error {
	switch name {
	case response.EdgeRequest:
		m.ClearRequest()
		return nil
	case response.EdgeScenario:
		m.ClearScenario()
		return nil
	}
	return fmt.Errorf("unknown Response unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResponseMutation) ResetEdge(name string) error {
	switch name {
	case response.EdgeRequest:
		m.ResetRequest()
		return nil
	case response.EdgeScenario:
		m.ResetScenario()
		return nil
	case response.EdgeEvaluations:
		m.ResetEvaluations()
		return nil
	}
	return fmt.Errorf("unknown Response edge %s", name)
}

// ScenarioMutation represents an operation that mutates the Scenario nodes in the graph.
type ScenarioMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	externalId       *string
	description      *string
	systemprompt     *string
	date             *time.Time
	clearedFields    map[string]struct{}
	responses        map[uuid.UUID]struct{}
	removedresponses map[uuid.UUID]struct{}
	clearedresponses bool
	done             bool
	oldValue         func(context.Context) (*Scenario, error)
	predicates       []predicate.Scenario
}

var _ ent.Mutation = (*ScenarioMutation)(nil)

// scenarioOption allows management of the mutation configuration using functional options.
type scenarioOption func(*ScenarioMutation)

// newScenarioMutation creates new mutation for the Scenario entity.
func newScenarioMutation(c config, op Op, opts ...scenarioOption) *ScenarioMutation {
	m := &ScenarioMutation{
		config:        c,
		op:            op,
		typ:           TypeScenario,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScenarioID sets the ID field of the mutation.
func withScenarioID(id uuid.UUID) scenarioOption {
	return func(m *ScenarioMutation) {
		var (
			err   error
			once  sync.Once
			value *Scenario
		)
		m.oldValue = func(ctx context.Context) (*Scenario, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Scenario.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScenario sets the old Scenario of the mutation.
func withScenario(node *Scenario) scenarioOption {
	return func(m *ScenarioMutation) {
		m.oldValue = func(context.Context) (*Scenario, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScenarioMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScenarioMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Scenario entities.
func (m *ScenarioMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScenarioMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScenarioMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Scenario.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ScenarioMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ScenarioMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Scenario entity.
// If the Scenario object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScenarioMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ScenarioMutation) ResetName() {
	m.name = nil
}

// SetExternalId sets the "externalId" field.
func (m *ScenarioMutation) SetExternalId(s string) {
	m.externalId = &s
}

// ExternalId returns the value of the "externalId" field in the mutation.
func (m *ScenarioMutation) ExternalId() (r string, exists bool) {
	v := m.externalId
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalId returns the old "externalId" field's value of the Scenario entity.
// If the Scenario object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScenarioMutation) OldExternalId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalId: %w", err)
	}
	return oldValue.ExternalId, nil
}

// ClearExternalId clears the value of the "externalId" field.
func (m *ScenarioMutation) ClearExternalId() {
	m.externalId = nil
	m.clearedFields[scenario.FieldExternalId] = struct{}{}
}

// ExternalIdCleared returns if the "externalId" field was cleared in this mutation.
func (m *ScenarioMutation) ExternalIdCleared() bool {
	_, ok := m.clearedFields[scenario.FieldExternalId]
	return ok
}

// ResetExternalId resets all changes to the "externalId" field.
func (m *ScenarioMutation) ResetExternalId() {
	m.externalId = nil
	delete(m.clearedFields, scenario.FieldExternalId)
}

// SetDescription sets the "description" field.
func (m *ScenarioMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ScenarioMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Scenario entity.
// If the Scenario object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScenarioMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ScenarioMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[scenario.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ScenarioMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[scenario.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ScenarioMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, scenario.FieldDescription)
}

// SetSystemprompt sets the "systemprompt" field.
func (m *ScenarioMutation) SetSystemprompt(s string) {
	m.systemprompt = &s
}

// Systemprompt returns the value of the "systemprompt" field in the mutation.
func (m *ScenarioMutation) Systemprompt() (r string, exists bool) {
	v := m.systemprompt
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemprompt returns the old "systemprompt" field's value of the Scenario entity.
// If the Scenario object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScenarioMutation) OldSystemprompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSystemprompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSystemprompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemprompt: %w", err)
	}
	return oldValue.Systemprompt, nil
}

// ClearSystemprompt clears the value of the "systemprompt" field.
func (m *ScenarioMutation) ClearSystemprompt() {
	m.systemprompt = nil
	m.clearedFields[scenario.FieldSystemprompt] = struct{}{}
}

// SystempromptCleared returns if the "systemprompt" field was cleared in this mutation.
func (m *ScenarioMutation) SystempromptCleared() bool {
	_, ok := m.clearedFields[scenario.FieldSystemprompt]
	return ok
}

// ResetSystemprompt resets all changes to the "systemprompt" field.
func (m *ScenarioMutation) ResetSystemprompt() {
	m.systemprompt = nil
	delete(m.clearedFields, scenario.FieldSystemprompt)
}

// SetDate sets the "date" field.
func (m *ScenarioMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ScenarioMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Scenario entity.
// If the Scenario object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScenarioMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *ScenarioMutation) ClearDate() {
	m.date = nil
	m.clearedFields[scenario.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *ScenarioMutation) DateCleared() bool {
	_, ok := m.clearedFields[scenario.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *ScenarioMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, scenario.FieldDate)
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *ScenarioMutation) AddResponseIDs(ids ...uuid.UUID) {
	if m.responses == nil {
		m.responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *ScenarioMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared reports if the "responses" edge to the Response entity was cleared.
func (m *ScenarioMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *ScenarioMutation) RemoveResponseIDs(ids ...uuid.UUID) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.responses, ids[i])
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *ScenarioMutation) RemovedResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *ScenarioMutation) ResponsesIDs() (ids []uuid.UUID) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *ScenarioMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// Where appends a list predicates to the ScenarioMutation builder.
func (m *ScenarioMutation) Where(ps ...predicate.Scenario) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScenarioMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScenarioMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Scenario, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScenarioMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScenarioMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Scenario).
func (m *ScenarioMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScenarioMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, scenario.FieldName)
	}
	if m.externalId != nil {
		fields = append(fields, scenario.FieldExternalId)
	}
	if m.description != nil {
		fields = append(fields, scenario.FieldDescription)
	}
	if m.systemprompt != nil {
		fields = append(fields, scenario.FieldSystemprompt)
	}
	if m.date != nil {
		fields = append(fields, scenario.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScenarioMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scenario.FieldName:
		return m.Name()
	case scenario.FieldExternalId:
		return m.ExternalId()
	case scenario.FieldDescription:
		return m.Description()
	case scenario.FieldSystemprompt:
		return m.Systemprompt()
	case scenario.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScenarioMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scenario.FieldName:
		return m.OldName(ctx)
	case scenario.FieldExternalId:
		return m.OldExternalId(ctx)
	case scenario.FieldDescription:
		return m.OldDescription(ctx)
	case scenario.FieldSystemprompt:
		return m.OldSystemprompt(ctx)
	case scenario.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Scenario field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScenarioMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scenario.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case scenario.FieldExternalId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalId(v)
		return nil
	case scenario.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case scenario.FieldSystemprompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemprompt(v)
		return nil
	case scenario.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Scenario field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScenarioMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScenarioMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScenarioMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Scenario numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScenarioMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(scenario.FieldExternalId) {
		fields = append(fields, scenario.FieldExternalId)
	}
	if m.FieldCleared(scenario.FieldDescription) {
		fields = append(fields, scenario.FieldDescription)
	}
	if m.FieldCleared(scenario.FieldSystemprompt) {
		fields = append(fields, scenario.FieldSystemprompt)
	}
	if m.FieldCleared(scenario.FieldDate) {
		fields = append(fields, scenario.FieldDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScenarioMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScenarioMutation) ClearField(name string) error {
	switch name {
	case scenario.FieldExternalId:
		m.ClearExternalId()
		return nil
	case scenario.FieldDescription:
		m.ClearDescription()
		return nil
	case scenario.FieldSystemprompt:
		m.ClearSystemprompt()
		return nil
	case scenario.FieldDate:
		m.ClearDate()
		return nil
	}
	return fmt.Errorf("unknown Scenario nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScenarioMutation) ResetField(name string) error {
	switch name {
	case scenario.FieldName:
		m.ResetName()
		return nil
	case scenario.FieldExternalId:
		m.ResetExternalId()
		return nil
	case scenario.FieldDescription:
		m.ResetDescription()
		return nil
	case scenario.FieldSystemprompt:
		m.ResetSystemprompt()
		return nil
	case scenario.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Scenario field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScenarioMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.responses != nil {
		edges = append(edges, scenario.EdgeResponses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScenarioMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scenario.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScenarioMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedresponses != nil {
		edges = append(edges, scenario.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScenarioMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case scenario.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScenarioMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedresponses {
		edges = append(edges, scenario.EdgeResponses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScenarioMutation) EdgeCleared(name string) bool {
	switch name {
	case scenario.EdgeResponses:
		return m.clearedresponses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScenarioMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Scenario unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScenarioMutation) ResetEdge(name string) error {
	switch name {
	case scenario.EdgeResponses:
		m.ResetResponses()
		return nil
	}
	return fmt.Errorf("unknown Scenario edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	name               *string
	externalId         *string
	_type              *string
	clearedFields      map[string]struct{}
	evaluations        map[uuid.UUID]struct{}
	removedevaluations map[uuid.UUID]struct{}
	clearedevaluations bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetExternalId sets the "externalId" field.
func (m *UserMutation) SetExternalId(s string) {
	m.externalId = &s
}

// ExternalId returns the value of the "externalId" field in the mutation.
func (m *UserMutation) ExternalId() (r string, exists bool) {
	v := m.externalId
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalId returns the old "externalId" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldExternalId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalId: %w", err)
	}
	return oldValue.ExternalId, nil
}

// ResetExternalId resets all changes to the "externalId" field.
func (m *UserMutation) ResetExternalId() {
	m.externalId = nil
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ClearType clears the value of the "type" field.
func (m *UserMutation) ClearType() {
	m._type = nil
	m.clearedFields[user.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *UserMutation) TypeCleared() bool {
	_, ok := m.clearedFields[user.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
	delete(m.clearedFields, user.FieldType)
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by ids.
func (m *UserMutation) AddEvaluationIDs(ids ...uuid.UUID) {
	if m.evaluations == nil {
		m.evaluations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.evaluations[ids[i]] = struct{}{}
	}
}

// ClearEvaluations clears the "evaluations" edge to the Evaluation entity.
func (m *UserMutation) ClearEvaluations() {
	m.clearedevaluations = true
}

// EvaluationsCleared reports if the "evaluations" edge to the Evaluation entity was cleared.
func (m *UserMutation) EvaluationsCleared() bool {
	return m.clearedevaluations
}

// RemoveEvaluationIDs removes the "evaluations" edge to the Evaluation entity by IDs.
func (m *UserMutation) RemoveEvaluationIDs(ids ...uuid.UUID) {
	if m.removedevaluations == nil {
		m.removedevaluations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.evaluations, ids[i])
		m.removedevaluations[ids[i]] = struct{}{}
	}
}

// RemovedEvaluations returns the removed IDs of the "evaluations" edge to the Evaluation entity.
func (m *UserMutation) RemovedEvaluationsIDs() (ids []uuid.UUID) {
	for id := range m.removedevaluations {
		ids = append(ids, id)
	}
	return
}

// EvaluationsIDs returns the "evaluations" edge IDs in the mutation.
func (m *UserMutation) EvaluationsIDs() (ids []uuid.UUID) {
	for id := range m.evaluations {
		ids = append(ids, id)
	}
	return
}

// ResetEvaluations resets all changes to the "evaluations" edge.
func (m *UserMutation) ResetEvaluations() {
	m.evaluations = nil
	m.clearedevaluations = false
	m.removedevaluations = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.externalId != nil {
		fields = append(fields, user.FieldExternalId)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldExternalId:
		return m.ExternalId()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldExternalId:
		return m.OldExternalId(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldExternalId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalId(v)
		return nil
	case user.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldType) {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldType:
		m.ClearType()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldExternalId:
		m.ResetExternalId()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.evaluations != nil {
		edges = append(edges, user.EdgeEvaluations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEvaluations:
		ids := make([]ent.Value, 0, len(m.evaluations))
		for id := range m.evaluations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedevaluations != nil {
		edges = append(edges, user.EdgeEvaluations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEvaluations:
		ids := make([]ent.Value, 0, len(m.removedevaluations))
		for id := range m.removedevaluations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedevaluations {
		edges = append(edges, user.EdgeEvaluations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeEvaluations:
		return m.clearedevaluations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeEvaluations:
		m.ResetEvaluations()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
