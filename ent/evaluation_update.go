// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/predicate"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/user"
)

// EvaluationUpdate is the builder for updating Evaluation entities.
type EvaluationUpdate struct {
	config
	hooks    []Hook
	mutation *EvaluationMutation
}

// Where appends a list predicates to the EvaluationUpdate builder.
func (eu *EvaluationUpdate) Where(ps ...predicate.Evaluation) *EvaluationUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUserId sets the "userId" field.
func (eu *EvaluationUpdate) SetUserId(u uuid.UUID) *EvaluationUpdate {
	eu.mutation.SetUserId(u)
	return eu
}

// SetResponseId sets the "responseId" field.
func (eu *EvaluationUpdate) SetResponseId(u uuid.UUID) *EvaluationUpdate {
	eu.mutation.SetResponseId(u)
	return eu
}

// SetExternalId sets the "externalId" field.
func (eu *EvaluationUpdate) SetExternalId(s string) *EvaluationUpdate {
	eu.mutation.SetExternalId(s)
	return eu
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (eu *EvaluationUpdate) SetNillableExternalId(s *string) *EvaluationUpdate {
	if s != nil {
		eu.SetExternalId(*s)
	}
	return eu
}

// ClearExternalId clears the value of the "externalId" field.
func (eu *EvaluationUpdate) ClearExternalId() *EvaluationUpdate {
	eu.mutation.ClearExternalId()
	return eu
}

// SetDate sets the "date" field.
func (eu *EvaluationUpdate) SetDate(t time.Time) *EvaluationUpdate {
	eu.mutation.SetDate(t)
	return eu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (eu *EvaluationUpdate) SetNillableDate(t *time.Time) *EvaluationUpdate {
	if t != nil {
		eu.SetDate(*t)
	}
	return eu
}

// ClearDate clears the value of the "date" field.
func (eu *EvaluationUpdate) ClearDate() *EvaluationUpdate {
	eu.mutation.ClearDate()
	return eu
}

// SetEvaluationResult sets the "evaluationResult" field.
func (eu *EvaluationUpdate) SetEvaluationResult(s string) *EvaluationUpdate {
	eu.mutation.SetEvaluationResult(s)
	return eu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *EvaluationUpdate) SetUserID(id uuid.UUID) *EvaluationUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *EvaluationUpdate) SetUser(u *User) *EvaluationUpdate {
	return eu.SetUserID(u.ID)
}

// SetResponseID sets the "response" edge to the Response entity by ID.
func (eu *EvaluationUpdate) SetResponseID(id uuid.UUID) *EvaluationUpdate {
	eu.mutation.SetResponseID(id)
	return eu
}

// SetResponse sets the "response" edge to the Response entity.
func (eu *EvaluationUpdate) SetResponse(r *Response) *EvaluationUpdate {
	return eu.SetResponseID(r.ID)
}

// Mutation returns the EvaluationMutation object of the builder.
func (eu *EvaluationUpdate) Mutation() *EvaluationMutation {
	return eu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EvaluationUpdate) ClearUser() *EvaluationUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearResponse clears the "response" edge to the Response entity.
func (eu *EvaluationUpdate) ClearResponse() *EvaluationUpdate {
	eu.mutation.ClearResponse()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EvaluationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EvaluationUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EvaluationUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EvaluationUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EvaluationUpdate) check() error {
	if _, ok := eu.mutation.UserID(); eu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Evaluation.user"`)
	}
	if _, ok := eu.mutation.ResponseID(); eu.mutation.ResponseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Evaluation.response"`)
	}
	return nil
}

func (eu *EvaluationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(evaluation.Table, evaluation.Columns, sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ExternalId(); ok {
		_spec.SetField(evaluation.FieldExternalId, field.TypeString, value)
	}
	if eu.mutation.ExternalIdCleared() {
		_spec.ClearField(evaluation.FieldExternalId, field.TypeString)
	}
	if value, ok := eu.mutation.Date(); ok {
		_spec.SetField(evaluation.FieldDate, field.TypeTime, value)
	}
	if eu.mutation.DateCleared() {
		_spec.ClearField(evaluation.FieldDate, field.TypeTime)
	}
	if value, ok := eu.mutation.EvaluationResult(); ok {
		_spec.SetField(evaluation.FieldEvaluationResult, field.TypeString, value)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.UserTable,
			Columns: []string{evaluation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.UserTable,
			Columns: []string{evaluation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.ResponseTable,
			Columns: []string{evaluation.ResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.ResponseTable,
			Columns: []string{evaluation.ResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evaluation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EvaluationUpdateOne is the builder for updating a single Evaluation entity.
type EvaluationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EvaluationMutation
}

// SetUserId sets the "userId" field.
func (euo *EvaluationUpdateOne) SetUserId(u uuid.UUID) *EvaluationUpdateOne {
	euo.mutation.SetUserId(u)
	return euo
}

// SetResponseId sets the "responseId" field.
func (euo *EvaluationUpdateOne) SetResponseId(u uuid.UUID) *EvaluationUpdateOne {
	euo.mutation.SetResponseId(u)
	return euo
}

// SetExternalId sets the "externalId" field.
func (euo *EvaluationUpdateOne) SetExternalId(s string) *EvaluationUpdateOne {
	euo.mutation.SetExternalId(s)
	return euo
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (euo *EvaluationUpdateOne) SetNillableExternalId(s *string) *EvaluationUpdateOne {
	if s != nil {
		euo.SetExternalId(*s)
	}
	return euo
}

// ClearExternalId clears the value of the "externalId" field.
func (euo *EvaluationUpdateOne) ClearExternalId() *EvaluationUpdateOne {
	euo.mutation.ClearExternalId()
	return euo
}

// SetDate sets the "date" field.
func (euo *EvaluationUpdateOne) SetDate(t time.Time) *EvaluationUpdateOne {
	euo.mutation.SetDate(t)
	return euo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (euo *EvaluationUpdateOne) SetNillableDate(t *time.Time) *EvaluationUpdateOne {
	if t != nil {
		euo.SetDate(*t)
	}
	return euo
}

// ClearDate clears the value of the "date" field.
func (euo *EvaluationUpdateOne) ClearDate() *EvaluationUpdateOne {
	euo.mutation.ClearDate()
	return euo
}

// SetEvaluationResult sets the "evaluationResult" field.
func (euo *EvaluationUpdateOne) SetEvaluationResult(s string) *EvaluationUpdateOne {
	euo.mutation.SetEvaluationResult(s)
	return euo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *EvaluationUpdateOne) SetUserID(id uuid.UUID) *EvaluationUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *EvaluationUpdateOne) SetUser(u *User) *EvaluationUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetResponseID sets the "response" edge to the Response entity by ID.
func (euo *EvaluationUpdateOne) SetResponseID(id uuid.UUID) *EvaluationUpdateOne {
	euo.mutation.SetResponseID(id)
	return euo
}

// SetResponse sets the "response" edge to the Response entity.
func (euo *EvaluationUpdateOne) SetResponse(r *Response) *EvaluationUpdateOne {
	return euo.SetResponseID(r.ID)
}

// Mutation returns the EvaluationMutation object of the builder.
func (euo *EvaluationUpdateOne) Mutation() *EvaluationMutation {
	return euo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EvaluationUpdateOne) ClearUser() *EvaluationUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearResponse clears the "response" edge to the Response entity.
func (euo *EvaluationUpdateOne) ClearResponse() *EvaluationUpdateOne {
	euo.mutation.ClearResponse()
	return euo
}

// Where appends a list predicates to the EvaluationUpdate builder.
func (euo *EvaluationUpdateOne) Where(ps ...predicate.Evaluation) *EvaluationUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EvaluationUpdateOne) Select(field string, fields ...string) *EvaluationUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Evaluation entity.
func (euo *EvaluationUpdateOne) Save(ctx context.Context) (*Evaluation, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EvaluationUpdateOne) SaveX(ctx context.Context) *Evaluation {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EvaluationUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EvaluationUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EvaluationUpdateOne) check() error {
	if _, ok := euo.mutation.UserID(); euo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Evaluation.user"`)
	}
	if _, ok := euo.mutation.ResponseID(); euo.mutation.ResponseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Evaluation.response"`)
	}
	return nil
}

func (euo *EvaluationUpdateOne) sqlSave(ctx context.Context) (_node *Evaluation, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(evaluation.Table, evaluation.Columns, sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Evaluation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evaluation.FieldID)
		for _, f := range fields {
			if !evaluation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != evaluation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ExternalId(); ok {
		_spec.SetField(evaluation.FieldExternalId, field.TypeString, value)
	}
	if euo.mutation.ExternalIdCleared() {
		_spec.ClearField(evaluation.FieldExternalId, field.TypeString)
	}
	if value, ok := euo.mutation.Date(); ok {
		_spec.SetField(evaluation.FieldDate, field.TypeTime, value)
	}
	if euo.mutation.DateCleared() {
		_spec.ClearField(evaluation.FieldDate, field.TypeTime)
	}
	if value, ok := euo.mutation.EvaluationResult(); ok {
		_spec.SetField(evaluation.FieldEvaluationResult, field.TypeString, value)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.UserTable,
			Columns: []string{evaluation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.UserTable,
			Columns: []string{evaluation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.ResponseTable,
			Columns: []string{evaluation.ResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   evaluation.ResponseTable,
			Columns: []string{evaluation.ResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Evaluation{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{evaluation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
