// Code generated by ent, DO NOT EDIT.

package evaluationprompt

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the evaluationprompt type in the database.
	Label = "evaluation_prompt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// EdgeEvaluations holds the string denoting the evaluations edge name in mutations.
	EdgeEvaluations = "evaluations"
	// Table holds the table name of the evaluationprompt in the database.
	Table = "evaluation_prompts"
	// EvaluationsTable is the table that holds the evaluations relation/edge.
	EvaluationsTable = "evaluations"
	// EvaluationsInverseTable is the table name for the Evaluation entity.
	// It exists in this package in order to avoid circular dependency with the "evaluation" package.
	EvaluationsInverseTable = "evaluations"
	// EvaluationsColumn is the table column denoting the evaluations relation/edge.
	EvaluationsColumn = "evaluation_prompt_id"
)

// Columns holds all SQL columns for evaluationprompt fields.
var Columns = []string{
	FieldID,
	FieldPrompt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the EvaluationPrompt queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByEvaluationsCount orders the results by evaluations count.
func ByEvaluationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvaluationsStep(), opts...)
	}
}

// ByEvaluations orders the results by evaluations terms.
func ByEvaluations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvaluationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEvaluationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvaluationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EvaluationsTable, EvaluationsColumn),
	)
}
