// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/scenario"
)

// ResponseCreate is the builder for creating a Response entity.
type ResponseCreate struct {
	config
	mutation *ResponseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExternalId sets the "externalId" field.
func (rc *ResponseCreate) SetExternalId(s string) *ResponseCreate {
	rc.mutation.SetExternalId(s)
	return rc
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableExternalId(s *string) *ResponseCreate {
	if s != nil {
		rc.SetExternalId(*s)
	}
	return rc
}

// SetRequestId sets the "requestId" field.
func (rc *ResponseCreate) SetRequestId(u uuid.UUID) *ResponseCreate {
	rc.mutation.SetRequestId(u)
	return rc
}

// SetScenarioId sets the "scenarioId" field.
func (rc *ResponseCreate) SetScenarioId(u uuid.UUID) *ResponseCreate {
	rc.mutation.SetScenarioId(u)
	return rc
}

// SetFrom sets the "from" field.
func (rc *ResponseCreate) SetFrom(s string) *ResponseCreate {
	rc.mutation.SetFrom(s)
	return rc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableFrom(s *string) *ResponseCreate {
	if s != nil {
		rc.SetFrom(*s)
	}
	return rc
}

// SetSubject sets the "subject" field.
func (rc *ResponseCreate) SetSubject(s string) *ResponseCreate {
	rc.mutation.SetSubject(s)
	return rc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableSubject(s *string) *ResponseCreate {
	if s != nil {
		rc.SetSubject(*s)
	}
	return rc
}

// SetBody sets the "body" field.
func (rc *ResponseCreate) SetBody(s string) *ResponseCreate {
	rc.mutation.SetBody(s)
	return rc
}

// SetDate sets the "date" field.
func (rc *ResponseCreate) SetDate(t time.Time) *ResponseCreate {
	rc.mutation.SetDate(t)
	return rc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableDate(t *time.Time) *ResponseCreate {
	if t != nil {
		rc.SetDate(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResponseCreate) SetID(u uuid.UUID) *ResponseCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableID(u *uuid.UUID) *ResponseCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (rc *ResponseCreate) SetRequestID(id uuid.UUID) *ResponseCreate {
	rc.mutation.SetRequestID(id)
	return rc
}

// SetRequest sets the "request" edge to the Request entity.
func (rc *ResponseCreate) SetRequest(r *Request) *ResponseCreate {
	return rc.SetRequestID(r.ID)
}

// SetScenarioID sets the "scenario" edge to the Scenario entity by ID.
func (rc *ResponseCreate) SetScenarioID(id uuid.UUID) *ResponseCreate {
	rc.mutation.SetScenarioID(id)
	return rc
}

// SetScenario sets the "scenario" edge to the Scenario entity.
func (rc *ResponseCreate) SetScenario(s *Scenario) *ResponseCreate {
	return rc.SetScenarioID(s.ID)
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (rc *ResponseCreate) AddEvaluationIDs(ids ...uuid.UUID) *ResponseCreate {
	rc.mutation.AddEvaluationIDs(ids...)
	return rc
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (rc *ResponseCreate) AddEvaluations(e ...*Evaluation) *ResponseCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEvaluationIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (rc *ResponseCreate) Mutation() *ResponseMutation {
	return rc.mutation
}

// Save creates the Response in the database.
func (rc *ResponseCreate) Save(ctx context.Context) (*Response, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResponseCreate) SaveX(ctx context.Context) *Response {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResponseCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResponseCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResponseCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := response.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResponseCreate) check() error {
	if _, ok := rc.mutation.RequestId(); !ok {
		return &ValidationError{Name: "requestId", err: errors.New(`ent: missing required field "Response.requestId"`)}
	}
	if _, ok := rc.mutation.ScenarioId(); !ok {
		return &ValidationError{Name: "scenarioId", err: errors.New(`ent: missing required field "Response.scenarioId"`)}
	}
	if _, ok := rc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Response.body"`)}
	}
	if _, ok := rc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required edge "Response.request"`)}
	}
	if _, ok := rc.mutation.ScenarioID(); !ok {
		return &ValidationError{Name: "scenario", err: errors.New(`ent: missing required edge "Response.scenario"`)}
	}
	return nil
}

func (rc *ResponseCreate) sqlSave(ctx context.Context) (*Response, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResponseCreate) createSpec() (*Response, *sqlgraph.CreateSpec) {
	var (
		_node = &Response{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(response.Table, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.ExternalId(); ok {
		_spec.SetField(response.FieldExternalId, field.TypeString, value)
		_node.ExternalId = value
	}
	if value, ok := rc.mutation.From(); ok {
		_spec.SetField(response.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := rc.mutation.Subject(); ok {
		_spec.SetField(response.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := rc.mutation.Body(); ok {
		_spec.SetField(response.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := rc.mutation.Date(); ok {
		_spec.SetField(response.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := rc.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ScenarioIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.ScenarioTable,
			Columns: []string{response.ScenarioColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScenarioId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Response.Create().
//		SetExternalId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResponseUpsert) {
//			SetExternalId(v+v).
//		}).
//		Exec(ctx)
func (rc *ResponseCreate) OnConflict(opts ...sql.ConflictOption) *ResponseUpsertOne {
	rc.conflict = opts
	return &ResponseUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Response.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ResponseCreate) OnConflictColumns(columns ...string) *ResponseUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ResponseUpsertOne{
		create: rc,
	}
}

type (
	// ResponseUpsertOne is the builder for "upsert"-ing
	//  one Response node.
	ResponseUpsertOne struct {
		create *ResponseCreate
	}

	// ResponseUpsert is the "OnConflict" setter.
	ResponseUpsert struct {
		*sql.UpdateSet
	}
)

// SetExternalId sets the "externalId" field.
func (u *ResponseUpsert) SetExternalId(v string) *ResponseUpsert {
	u.Set(response.FieldExternalId, v)
	return u
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateExternalId() *ResponseUpsert {
	u.SetExcluded(response.FieldExternalId)
	return u
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ResponseUpsert) ClearExternalId() *ResponseUpsert {
	u.SetNull(response.FieldExternalId)
	return u
}

// SetRequestId sets the "requestId" field.
func (u *ResponseUpsert) SetRequestId(v uuid.UUID) *ResponseUpsert {
	u.Set(response.FieldRequestId, v)
	return u
}

// UpdateRequestId sets the "requestId" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateRequestId() *ResponseUpsert {
	u.SetExcluded(response.FieldRequestId)
	return u
}

// SetScenarioId sets the "scenarioId" field.
func (u *ResponseUpsert) SetScenarioId(v uuid.UUID) *ResponseUpsert {
	u.Set(response.FieldScenarioId, v)
	return u
}

// UpdateScenarioId sets the "scenarioId" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateScenarioId() *ResponseUpsert {
	u.SetExcluded(response.FieldScenarioId)
	return u
}

// SetFrom sets the "from" field.
func (u *ResponseUpsert) SetFrom(v string) *ResponseUpsert {
	u.Set(response.FieldFrom, v)
	return u
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateFrom() *ResponseUpsert {
	u.SetExcluded(response.FieldFrom)
	return u
}

// ClearFrom clears the value of the "from" field.
func (u *ResponseUpsert) ClearFrom() *ResponseUpsert {
	u.SetNull(response.FieldFrom)
	return u
}

// SetSubject sets the "subject" field.
func (u *ResponseUpsert) SetSubject(v string) *ResponseUpsert {
	u.Set(response.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateSubject() *ResponseUpsert {
	u.SetExcluded(response.FieldSubject)
	return u
}

// ClearSubject clears the value of the "subject" field.
func (u *ResponseUpsert) ClearSubject() *ResponseUpsert {
	u.SetNull(response.FieldSubject)
	return u
}

// SetBody sets the "body" field.
func (u *ResponseUpsert) SetBody(v string) *ResponseUpsert {
	u.Set(response.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateBody() *ResponseUpsert {
	u.SetExcluded(response.FieldBody)
	return u
}

// SetDate sets the "date" field.
func (u *ResponseUpsert) SetDate(v time.Time) *ResponseUpsert {
	u.Set(response.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResponseUpsert) UpdateDate() *ResponseUpsert {
	u.SetExcluded(response.FieldDate)
	return u
}

// ClearDate clears the value of the "date" field.
func (u *ResponseUpsert) ClearDate() *ResponseUpsert {
	u.SetNull(response.FieldDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Response.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(response.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResponseUpsertOne) UpdateNewValues() *ResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(response.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Response.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ResponseUpsertOne) Ignore() *ResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResponseUpsertOne) DoNothing() *ResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResponseCreate.OnConflict
// documentation for more info.
func (u *ResponseUpsertOne) Update(set func(*ResponseUpsert)) *ResponseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResponseUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalId sets the "externalId" field.
func (u *ResponseUpsertOne) SetExternalId(v string) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetExternalId(v)
	})
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateExternalId() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateExternalId()
	})
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ResponseUpsertOne) ClearExternalId() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearExternalId()
	})
}

// SetRequestId sets the "requestId" field.
func (u *ResponseUpsertOne) SetRequestId(v uuid.UUID) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetRequestId(v)
	})
}

// UpdateRequestId sets the "requestId" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateRequestId() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateRequestId()
	})
}

// SetScenarioId sets the "scenarioId" field.
func (u *ResponseUpsertOne) SetScenarioId(v uuid.UUID) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetScenarioId(v)
	})
}

// UpdateScenarioId sets the "scenarioId" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateScenarioId() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateScenarioId()
	})
}

// SetFrom sets the "from" field.
func (u *ResponseUpsertOne) SetFrom(v string) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateFrom() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *ResponseUpsertOne) ClearFrom() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearFrom()
	})
}

// SetSubject sets the "subject" field.
func (u *ResponseUpsertOne) SetSubject(v string) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateSubject() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateSubject()
	})
}

// ClearSubject clears the value of the "subject" field.
func (u *ResponseUpsertOne) ClearSubject() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearSubject()
	})
}

// SetBody sets the "body" field.
func (u *ResponseUpsertOne) SetBody(v string) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateBody() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateBody()
	})
}

// SetDate sets the "date" field.
func (u *ResponseUpsertOne) SetDate(v time.Time) *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResponseUpsertOne) UpdateDate() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *ResponseUpsertOne) ClearDate() *ResponseUpsertOne {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearDate()
	})
}

// Exec executes the query.
func (u *ResponseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResponseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResponseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ResponseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ResponseUpsertOne.ID is not supported by MySQL driver. Use ResponseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ResponseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ResponseCreateBulk is the builder for creating many Response entities in bulk.
type ResponseCreateBulk struct {
	config
	builders []*ResponseCreate
	conflict []sql.ConflictOption
}

// Save creates the Response entities in the database.
func (rcb *ResponseCreateBulk) Save(ctx context.Context) ([]*Response, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Response, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResponseCreateBulk) SaveX(ctx context.Context) []*Response {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResponseCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Response.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ResponseUpsert) {
//			SetExternalId(v+v).
//		}).
//		Exec(ctx)
func (rcb *ResponseCreateBulk) OnConflict(opts ...sql.ConflictOption) *ResponseUpsertBulk {
	rcb.conflict = opts
	return &ResponseUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Response.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ResponseCreateBulk) OnConflictColumns(columns ...string) *ResponseUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ResponseUpsertBulk{
		create: rcb,
	}
}

// ResponseUpsertBulk is the builder for "upsert"-ing
// a bulk of Response nodes.
type ResponseUpsertBulk struct {
	create *ResponseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Response.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(response.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ResponseUpsertBulk) UpdateNewValues() *ResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(response.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Response.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ResponseUpsertBulk) Ignore() *ResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ResponseUpsertBulk) DoNothing() *ResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ResponseCreateBulk.OnConflict
// documentation for more info.
func (u *ResponseUpsertBulk) Update(set func(*ResponseUpsert)) *ResponseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ResponseUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalId sets the "externalId" field.
func (u *ResponseUpsertBulk) SetExternalId(v string) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetExternalId(v)
	})
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateExternalId() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateExternalId()
	})
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ResponseUpsertBulk) ClearExternalId() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearExternalId()
	})
}

// SetRequestId sets the "requestId" field.
func (u *ResponseUpsertBulk) SetRequestId(v uuid.UUID) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetRequestId(v)
	})
}

// UpdateRequestId sets the "requestId" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateRequestId() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateRequestId()
	})
}

// SetScenarioId sets the "scenarioId" field.
func (u *ResponseUpsertBulk) SetScenarioId(v uuid.UUID) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetScenarioId(v)
	})
}

// UpdateScenarioId sets the "scenarioId" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateScenarioId() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateScenarioId()
	})
}

// SetFrom sets the "from" field.
func (u *ResponseUpsertBulk) SetFrom(v string) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetFrom(v)
	})
}

// UpdateFrom sets the "from" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateFrom() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateFrom()
	})
}

// ClearFrom clears the value of the "from" field.
func (u *ResponseUpsertBulk) ClearFrom() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearFrom()
	})
}

// SetSubject sets the "subject" field.
func (u *ResponseUpsertBulk) SetSubject(v string) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateSubject() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateSubject()
	})
}

// ClearSubject clears the value of the "subject" field.
func (u *ResponseUpsertBulk) ClearSubject() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearSubject()
	})
}

// SetBody sets the "body" field.
func (u *ResponseUpsertBulk) SetBody(v string) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateBody() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateBody()
	})
}

// SetDate sets the "date" field.
func (u *ResponseUpsertBulk) SetDate(v time.Time) *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ResponseUpsertBulk) UpdateDate() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *ResponseUpsertBulk) ClearDate() *ResponseUpsertBulk {
	return u.Update(func(s *ResponseUpsert) {
		s.ClearDate()
	})
}

// Exec executes the query.
func (u *ResponseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ResponseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ResponseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ResponseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
