// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
)

// ResponseCreate is the builder for creating a Response entity.
type ResponseCreate struct {
	config
	mutation *ResponseMutation
	hooks    []Hook
}

// SetExternalId sets the "externalId" field.
func (rc *ResponseCreate) SetExternalId(s string) *ResponseCreate {
	rc.mutation.SetExternalId(s)
	return rc
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableExternalId(s *string) *ResponseCreate {
	if s != nil {
		rc.SetExternalId(*s)
	}
	return rc
}

// SetRequestId sets the "requestId" field.
func (rc *ResponseCreate) SetRequestId(u uuid.UUID) *ResponseCreate {
	rc.mutation.SetRequestId(u)
	return rc
}

// SetFrom sets the "from" field.
func (rc *ResponseCreate) SetFrom(s string) *ResponseCreate {
	rc.mutation.SetFrom(s)
	return rc
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableFrom(s *string) *ResponseCreate {
	if s != nil {
		rc.SetFrom(*s)
	}
	return rc
}

// SetSubject sets the "subject" field.
func (rc *ResponseCreate) SetSubject(s string) *ResponseCreate {
	rc.mutation.SetSubject(s)
	return rc
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableSubject(s *string) *ResponseCreate {
	if s != nil {
		rc.SetSubject(*s)
	}
	return rc
}

// SetBody sets the "body" field.
func (rc *ResponseCreate) SetBody(s string) *ResponseCreate {
	rc.mutation.SetBody(s)
	return rc
}

// SetDate sets the "date" field.
func (rc *ResponseCreate) SetDate(t time.Time) *ResponseCreate {
	rc.mutation.SetDate(t)
	return rc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableDate(t *time.Time) *ResponseCreate {
	if t != nil {
		rc.SetDate(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *ResponseCreate) SetID(u uuid.UUID) *ResponseCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *ResponseCreate) SetNillableID(u *uuid.UUID) *ResponseCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (rc *ResponseCreate) SetRequestID(id uuid.UUID) *ResponseCreate {
	rc.mutation.SetRequestID(id)
	return rc
}

// SetRequest sets the "request" edge to the Request entity.
func (rc *ResponseCreate) SetRequest(r *Request) *ResponseCreate {
	return rc.SetRequestID(r.ID)
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (rc *ResponseCreate) AddEvaluationIDs(ids ...uuid.UUID) *ResponseCreate {
	rc.mutation.AddEvaluationIDs(ids...)
	return rc
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (rc *ResponseCreate) AddEvaluations(e ...*Evaluation) *ResponseCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEvaluationIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (rc *ResponseCreate) Mutation() *ResponseMutation {
	return rc.mutation
}

// Save creates the Response in the database.
func (rc *ResponseCreate) Save(ctx context.Context) (*Response, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResponseCreate) SaveX(ctx context.Context) *Response {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResponseCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResponseCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResponseCreate) defaults() {
	if _, ok := rc.mutation.ID(); !ok {
		v := response.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResponseCreate) check() error {
	if _, ok := rc.mutation.RequestId(); !ok {
		return &ValidationError{Name: "requestId", err: errors.New(`ent: missing required field "Response.requestId"`)}
	}
	if _, ok := rc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Response.body"`)}
	}
	if _, ok := rc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request", err: errors.New(`ent: missing required edge "Response.request"`)}
	}
	return nil
}

func (rc *ResponseCreate) sqlSave(ctx context.Context) (*Response, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResponseCreate) createSpec() (*Response, *sqlgraph.CreateSpec) {
	var (
		_node = &Response{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(response.Table, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.ExternalId(); ok {
		_spec.SetField(response.FieldExternalId, field.TypeString, value)
		_node.ExternalId = value
	}
	if value, ok := rc.mutation.From(); ok {
		_spec.SetField(response.FieldFrom, field.TypeString, value)
		_node.From = value
	}
	if value, ok := rc.mutation.Subject(); ok {
		_spec.SetField(response.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := rc.mutation.Body(); ok {
		_spec.SetField(response.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := rc.mutation.Date(); ok {
		_spec.SetField(response.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := rc.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RequestId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResponseCreateBulk is the builder for creating many Response entities in bulk.
type ResponseCreateBulk struct {
	config
	builders []*ResponseCreate
}

// Save creates the Response entities in the database.
func (rcb *ResponseCreateBulk) Save(ctx context.Context) ([]*Response, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Response, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResponseCreateBulk) SaveX(ctx context.Context) []*Response {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResponseCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
