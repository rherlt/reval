// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/predicate"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
)

// ResponseUpdate is the builder for updating Response entities.
type ResponseUpdate struct {
	config
	hooks    []Hook
	mutation *ResponseMutation
}

// Where appends a list predicates to the ResponseUpdate builder.
func (ru *ResponseUpdate) Where(ps ...predicate.Response) *ResponseUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetExternalId sets the "externalId" field.
func (ru *ResponseUpdate) SetExternalId(s string) *ResponseUpdate {
	ru.mutation.SetExternalId(s)
	return ru
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableExternalId(s *string) *ResponseUpdate {
	if s != nil {
		ru.SetExternalId(*s)
	}
	return ru
}

// ClearExternalId clears the value of the "externalId" field.
func (ru *ResponseUpdate) ClearExternalId() *ResponseUpdate {
	ru.mutation.ClearExternalId()
	return ru
}

// SetRequestId sets the "requestId" field.
func (ru *ResponseUpdate) SetRequestId(u uuid.UUID) *ResponseUpdate {
	ru.mutation.SetRequestId(u)
	return ru
}

// SetFrom sets the "from" field.
func (ru *ResponseUpdate) SetFrom(s string) *ResponseUpdate {
	ru.mutation.SetFrom(s)
	return ru
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableFrom(s *string) *ResponseUpdate {
	if s != nil {
		ru.SetFrom(*s)
	}
	return ru
}

// ClearFrom clears the value of the "from" field.
func (ru *ResponseUpdate) ClearFrom() *ResponseUpdate {
	ru.mutation.ClearFrom()
	return ru
}

// SetSubject sets the "subject" field.
func (ru *ResponseUpdate) SetSubject(s string) *ResponseUpdate {
	ru.mutation.SetSubject(s)
	return ru
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableSubject(s *string) *ResponseUpdate {
	if s != nil {
		ru.SetSubject(*s)
	}
	return ru
}

// ClearSubject clears the value of the "subject" field.
func (ru *ResponseUpdate) ClearSubject() *ResponseUpdate {
	ru.mutation.ClearSubject()
	return ru
}

// SetBody sets the "body" field.
func (ru *ResponseUpdate) SetBody(s string) *ResponseUpdate {
	ru.mutation.SetBody(s)
	return ru
}

// SetDate sets the "date" field.
func (ru *ResponseUpdate) SetDate(t time.Time) *ResponseUpdate {
	ru.mutation.SetDate(t)
	return ru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ru *ResponseUpdate) SetNillableDate(t *time.Time) *ResponseUpdate {
	if t != nil {
		ru.SetDate(*t)
	}
	return ru
}

// ClearDate clears the value of the "date" field.
func (ru *ResponseUpdate) ClearDate() *ResponseUpdate {
	ru.mutation.ClearDate()
	return ru
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (ru *ResponseUpdate) SetRequestID(id uuid.UUID) *ResponseUpdate {
	ru.mutation.SetRequestID(id)
	return ru
}

// SetRequest sets the "request" edge to the Request entity.
func (ru *ResponseUpdate) SetRequest(r *Request) *ResponseUpdate {
	return ru.SetRequestID(r.ID)
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (ru *ResponseUpdate) AddEvaluationIDs(ids ...uuid.UUID) *ResponseUpdate {
	ru.mutation.AddEvaluationIDs(ids...)
	return ru
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (ru *ResponseUpdate) AddEvaluations(e ...*Evaluation) *ResponseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEvaluationIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (ru *ResponseUpdate) Mutation() *ResponseMutation {
	return ru.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (ru *ResponseUpdate) ClearRequest() *ResponseUpdate {
	ru.mutation.ClearRequest()
	return ru
}

// ClearEvaluations clears all "evaluations" edges to the Evaluation entity.
func (ru *ResponseUpdate) ClearEvaluations() *ResponseUpdate {
	ru.mutation.ClearEvaluations()
	return ru
}

// RemoveEvaluationIDs removes the "evaluations" edge to Evaluation entities by IDs.
func (ru *ResponseUpdate) RemoveEvaluationIDs(ids ...uuid.UUID) *ResponseUpdate {
	ru.mutation.RemoveEvaluationIDs(ids...)
	return ru
}

// RemoveEvaluations removes "evaluations" edges to Evaluation entities.
func (ru *ResponseUpdate) RemoveEvaluations(e ...*Evaluation) *ResponseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEvaluationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResponseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResponseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResponseUpdate) check() error {
	if _, ok := ru.mutation.RequestID(); ru.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.request"`)
	}
	return nil
}

func (ru *ResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(response.Table, response.Columns, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ExternalId(); ok {
		_spec.SetField(response.FieldExternalId, field.TypeString, value)
	}
	if ru.mutation.ExternalIdCleared() {
		_spec.ClearField(response.FieldExternalId, field.TypeString)
	}
	if value, ok := ru.mutation.From(); ok {
		_spec.SetField(response.FieldFrom, field.TypeString, value)
	}
	if ru.mutation.FromCleared() {
		_spec.ClearField(response.FieldFrom, field.TypeString)
	}
	if value, ok := ru.mutation.Subject(); ok {
		_spec.SetField(response.FieldSubject, field.TypeString, value)
	}
	if ru.mutation.SubjectCleared() {
		_spec.ClearField(response.FieldSubject, field.TypeString)
	}
	if value, ok := ru.mutation.Body(); ok {
		_spec.SetField(response.FieldBody, field.TypeString, value)
	}
	if value, ok := ru.mutation.Date(); ok {
		_spec.SetField(response.FieldDate, field.TypeTime, value)
	}
	if ru.mutation.DateCleared() {
		_spec.ClearField(response.FieldDate, field.TypeTime)
	}
	if ru.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEvaluationsIDs(); len(nodes) > 0 && !ru.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResponseUpdateOne is the builder for updating a single Response entity.
type ResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResponseMutation
}

// SetExternalId sets the "externalId" field.
func (ruo *ResponseUpdateOne) SetExternalId(s string) *ResponseUpdateOne {
	ruo.mutation.SetExternalId(s)
	return ruo
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableExternalId(s *string) *ResponseUpdateOne {
	if s != nil {
		ruo.SetExternalId(*s)
	}
	return ruo
}

// ClearExternalId clears the value of the "externalId" field.
func (ruo *ResponseUpdateOne) ClearExternalId() *ResponseUpdateOne {
	ruo.mutation.ClearExternalId()
	return ruo
}

// SetRequestId sets the "requestId" field.
func (ruo *ResponseUpdateOne) SetRequestId(u uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetRequestId(u)
	return ruo
}

// SetFrom sets the "from" field.
func (ruo *ResponseUpdateOne) SetFrom(s string) *ResponseUpdateOne {
	ruo.mutation.SetFrom(s)
	return ruo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableFrom(s *string) *ResponseUpdateOne {
	if s != nil {
		ruo.SetFrom(*s)
	}
	return ruo
}

// ClearFrom clears the value of the "from" field.
func (ruo *ResponseUpdateOne) ClearFrom() *ResponseUpdateOne {
	ruo.mutation.ClearFrom()
	return ruo
}

// SetSubject sets the "subject" field.
func (ruo *ResponseUpdateOne) SetSubject(s string) *ResponseUpdateOne {
	ruo.mutation.SetSubject(s)
	return ruo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableSubject(s *string) *ResponseUpdateOne {
	if s != nil {
		ruo.SetSubject(*s)
	}
	return ruo
}

// ClearSubject clears the value of the "subject" field.
func (ruo *ResponseUpdateOne) ClearSubject() *ResponseUpdateOne {
	ruo.mutation.ClearSubject()
	return ruo
}

// SetBody sets the "body" field.
func (ruo *ResponseUpdateOne) SetBody(s string) *ResponseUpdateOne {
	ruo.mutation.SetBody(s)
	return ruo
}

// SetDate sets the "date" field.
func (ruo *ResponseUpdateOne) SetDate(t time.Time) *ResponseUpdateOne {
	ruo.mutation.SetDate(t)
	return ruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruo *ResponseUpdateOne) SetNillableDate(t *time.Time) *ResponseUpdateOne {
	if t != nil {
		ruo.SetDate(*t)
	}
	return ruo
}

// ClearDate clears the value of the "date" field.
func (ruo *ResponseUpdateOne) ClearDate() *ResponseUpdateOne {
	ruo.mutation.ClearDate()
	return ruo
}

// SetRequestID sets the "request" edge to the Request entity by ID.
func (ruo *ResponseUpdateOne) SetRequestID(id uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.SetRequestID(id)
	return ruo
}

// SetRequest sets the "request" edge to the Request entity.
func (ruo *ResponseUpdateOne) SetRequest(r *Request) *ResponseUpdateOne {
	return ruo.SetRequestID(r.ID)
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (ruo *ResponseUpdateOne) AddEvaluationIDs(ids ...uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.AddEvaluationIDs(ids...)
	return ruo
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (ruo *ResponseUpdateOne) AddEvaluations(e ...*Evaluation) *ResponseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEvaluationIDs(ids...)
}

// Mutation returns the ResponseMutation object of the builder.
func (ruo *ResponseUpdateOne) Mutation() *ResponseMutation {
	return ruo.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (ruo *ResponseUpdateOne) ClearRequest() *ResponseUpdateOne {
	ruo.mutation.ClearRequest()
	return ruo
}

// ClearEvaluations clears all "evaluations" edges to the Evaluation entity.
func (ruo *ResponseUpdateOne) ClearEvaluations() *ResponseUpdateOne {
	ruo.mutation.ClearEvaluations()
	return ruo
}

// RemoveEvaluationIDs removes the "evaluations" edge to Evaluation entities by IDs.
func (ruo *ResponseUpdateOne) RemoveEvaluationIDs(ids ...uuid.UUID) *ResponseUpdateOne {
	ruo.mutation.RemoveEvaluationIDs(ids...)
	return ruo
}

// RemoveEvaluations removes "evaluations" edges to Evaluation entities.
func (ruo *ResponseUpdateOne) RemoveEvaluations(e ...*Evaluation) *ResponseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEvaluationIDs(ids...)
}

// Where appends a list predicates to the ResponseUpdate builder.
func (ruo *ResponseUpdateOne) Where(ps ...predicate.Response) *ResponseUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResponseUpdateOne) Select(field string, fields ...string) *ResponseUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Response entity.
func (ruo *ResponseUpdateOne) Save(ctx context.Context) (*Response, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResponseUpdateOne) SaveX(ctx context.Context) *Response {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResponseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResponseUpdateOne) check() error {
	if _, ok := ruo.mutation.RequestID(); ruo.mutation.RequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Response.request"`)
	}
	return nil
}

func (ruo *ResponseUpdateOne) sqlSave(ctx context.Context) (_node *Response, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(response.Table, response.Columns, sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Response.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, response.FieldID)
		for _, f := range fields {
			if !response.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != response.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ExternalId(); ok {
		_spec.SetField(response.FieldExternalId, field.TypeString, value)
	}
	if ruo.mutation.ExternalIdCleared() {
		_spec.ClearField(response.FieldExternalId, field.TypeString)
	}
	if value, ok := ruo.mutation.From(); ok {
		_spec.SetField(response.FieldFrom, field.TypeString, value)
	}
	if ruo.mutation.FromCleared() {
		_spec.ClearField(response.FieldFrom, field.TypeString)
	}
	if value, ok := ruo.mutation.Subject(); ok {
		_spec.SetField(response.FieldSubject, field.TypeString, value)
	}
	if ruo.mutation.SubjectCleared() {
		_spec.ClearField(response.FieldSubject, field.TypeString)
	}
	if value, ok := ruo.mutation.Body(); ok {
		_spec.SetField(response.FieldBody, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Date(); ok {
		_spec.SetField(response.FieldDate, field.TypeTime, value)
	}
	if ruo.mutation.DateCleared() {
		_spec.ClearField(response.FieldDate, field.TypeTime)
	}
	if ruo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   response.RequestTable,
			Columns: []string{response.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEvaluationsIDs(); len(nodes) > 0 && !ruo.mutation.EvaluationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   response.EvaluationsTable,
			Columns: []string{response.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Response{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{response.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
