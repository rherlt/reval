// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
)

// Response is the model entity for the Response schema.
type Response struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// RequestId holds the value of the "requestId" field.
	RequestId uuid.UUID `json:"requestId,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResponseQuery when eager-loading is set.
	Edges        ResponseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ResponseEdges holds the relations/edges for other nodes in the graph.
type ResponseEdges struct {
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// Evaluations holds the value of the evaluations edge.
	Evaluations []*Evaluation `json:"evaluations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) RequestOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.Request == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.Request, nil
	}
	return nil, &NotLoadedError{edge: "request"}
}

// EvaluationsOrErr returns the Evaluations value or an error if the edge
// was not loaded in eager-loading.
func (e ResponseEdges) EvaluationsOrErr() ([]*Evaluation, error) {
	if e.loadedTypes[1] {
		return e.Evaluations, nil
	}
	return nil, &NotLoadedError{edge: "evaluations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Response) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case response.FieldExternalId, response.FieldFrom, response.FieldSubject, response.FieldBody:
			values[i] = new(sql.NullString)
		case response.FieldDate:
			values[i] = new(sql.NullTime)
		case response.FieldID, response.FieldRequestId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Response fields.
func (r *Response) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case response.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case response.FieldExternalId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalId", values[i])
			} else if value.Valid {
				r.ExternalId = value.String
			}
		case response.FieldRequestId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field requestId", values[i])
			} else if value != nil {
				r.RequestId = *value
			}
		case response.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				r.From = value.String
			}
		case response.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				r.Subject = value.String
			}
		case response.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				r.Body = value.String
			}
		case response.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				r.Date = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Response.
// This includes values selected through modifiers, order, etc.
func (r *Response) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRequest queries the "request" edge of the Response entity.
func (r *Response) QueryRequest() *RequestQuery {
	return NewResponseClient(r.config).QueryRequest(r)
}

// QueryEvaluations queries the "evaluations" edge of the Response entity.
func (r *Response) QueryEvaluations() *EvaluationQuery {
	return NewResponseClient(r.config).QueryEvaluations(r)
}

// Update returns a builder for updating this Response.
// Note that you need to call Response.Unwrap() before calling this method if this Response
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Response) Update() *ResponseUpdateOne {
	return NewResponseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Response entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Response) Unwrap() *Response {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Response is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Response) String() string {
	var builder strings.Builder
	builder.WriteString("Response(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("externalId=")
	builder.WriteString(r.ExternalId)
	builder.WriteString(", ")
	builder.WriteString("requestId=")
	builder.WriteString(fmt.Sprintf("%v", r.RequestId))
	builder.WriteString(", ")
	builder.WriteString("from=")
	builder.WriteString(r.From)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(r.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(r.Body)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(r.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Responses is a parsable slice of Response.
type Responses []*Response
