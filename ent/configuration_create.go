// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/configuration"
)

// ConfigurationCreate is the builder for creating a Configuration entity.
type ConfigurationCreate struct {
	config
	mutation *ConfigurationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKey sets the "key" field.
func (cc *ConfigurationCreate) SetKey(s string) *ConfigurationCreate {
	cc.mutation.SetKey(s)
	return cc
}

// SetValue sets the "value" field.
func (cc *ConfigurationCreate) SetValue(s string) *ConfigurationCreate {
	cc.mutation.SetValue(s)
	return cc
}

// SetID sets the "id" field.
func (cc *ConfigurationCreate) SetID(u uuid.UUID) *ConfigurationCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConfigurationCreate) SetNillableID(u *uuid.UUID) *ConfigurationCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the ConfigurationMutation object of the builder.
func (cc *ConfigurationCreate) Mutation() *ConfigurationMutation {
	return cc.mutation
}

// Save creates the Configuration in the database.
func (cc *ConfigurationCreate) Save(ctx context.Context) (*Configuration, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConfigurationCreate) SaveX(ctx context.Context) *Configuration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConfigurationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConfigurationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConfigurationCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := configuration.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConfigurationCreate) check() error {
	if _, ok := cc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "Configuration.key"`)}
	}
	if v, ok := cc.mutation.Key(); ok {
		if err := configuration.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Configuration.key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Configuration.value"`)}
	}
	if v, ok := cc.mutation.Value(); ok {
		if err := configuration.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Configuration.value": %w`, err)}
		}
	}
	return nil
}

func (cc *ConfigurationCreate) sqlSave(ctx context.Context) (*Configuration, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConfigurationCreate) createSpec() (*Configuration, *sqlgraph.CreateSpec) {
	var (
		_node = &Configuration{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(configuration.Table, sqlgraph.NewFieldSpec(configuration.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Key(); ok {
		_spec.SetField(configuration.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cc.mutation.Value(); ok {
		_spec.SetField(configuration.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Configuration.Create().
//		SetKey(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConfigurationUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (cc *ConfigurationCreate) OnConflict(opts ...sql.ConflictOption) *ConfigurationUpsertOne {
	cc.conflict = opts
	return &ConfigurationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Configuration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConfigurationCreate) OnConflictColumns(columns ...string) *ConfigurationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConfigurationUpsertOne{
		create: cc,
	}
}

type (
	// ConfigurationUpsertOne is the builder for "upsert"-ing
	//  one Configuration node.
	ConfigurationUpsertOne struct {
		create *ConfigurationCreate
	}

	// ConfigurationUpsert is the "OnConflict" setter.
	ConfigurationUpsert struct {
		*sql.UpdateSet
	}
)

// SetKey sets the "key" field.
func (u *ConfigurationUpsert) SetKey(v string) *ConfigurationUpsert {
	u.Set(configuration.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ConfigurationUpsert) UpdateKey() *ConfigurationUpsert {
	u.SetExcluded(configuration.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *ConfigurationUpsert) SetValue(v string) *ConfigurationUpsert {
	u.Set(configuration.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ConfigurationUpsert) UpdateValue() *ConfigurationUpsert {
	u.SetExcluded(configuration.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Configuration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(configuration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConfigurationUpsertOne) UpdateNewValues() *ConfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(configuration.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Configuration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConfigurationUpsertOne) Ignore() *ConfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConfigurationUpsertOne) DoNothing() *ConfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConfigurationCreate.OnConflict
// documentation for more info.
func (u *ConfigurationUpsertOne) Update(set func(*ConfigurationUpsert)) *ConfigurationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConfigurationUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *ConfigurationUpsertOne) SetKey(v string) *ConfigurationUpsertOne {
	return u.Update(func(s *ConfigurationUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ConfigurationUpsertOne) UpdateKey() *ConfigurationUpsertOne {
	return u.Update(func(s *ConfigurationUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ConfigurationUpsertOne) SetValue(v string) *ConfigurationUpsertOne {
	return u.Update(func(s *ConfigurationUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ConfigurationUpsertOne) UpdateValue() *ConfigurationUpsertOne {
	return u.Update(func(s *ConfigurationUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ConfigurationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConfigurationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConfigurationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConfigurationUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ConfigurationUpsertOne.ID is not supported by MySQL driver. Use ConfigurationUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConfigurationUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ConfigurationCreateBulk is the builder for creating many Configuration entities in bulk.
type ConfigurationCreateBulk struct {
	config
	builders []*ConfigurationCreate
	conflict []sql.ConflictOption
}

// Save creates the Configuration entities in the database.
func (ccb *ConfigurationCreateBulk) Save(ctx context.Context) ([]*Configuration, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Configuration, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) SaveX(ctx context.Context) []*Configuration {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Configuration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConfigurationUpsert) {
//			SetKey(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConfigurationCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConfigurationUpsertBulk {
	ccb.conflict = opts
	return &ConfigurationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Configuration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConfigurationCreateBulk) OnConflictColumns(columns ...string) *ConfigurationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConfigurationUpsertBulk{
		create: ccb,
	}
}

// ConfigurationUpsertBulk is the builder for "upsert"-ing
// a bulk of Configuration nodes.
type ConfigurationUpsertBulk struct {
	create *ConfigurationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Configuration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(configuration.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ConfigurationUpsertBulk) UpdateNewValues() *ConfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(configuration.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Configuration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConfigurationUpsertBulk) Ignore() *ConfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConfigurationUpsertBulk) DoNothing() *ConfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConfigurationCreateBulk.OnConflict
// documentation for more info.
func (u *ConfigurationUpsertBulk) Update(set func(*ConfigurationUpsert)) *ConfigurationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConfigurationUpsert{UpdateSet: update})
	}))
	return u
}

// SetKey sets the "key" field.
func (u *ConfigurationUpsertBulk) SetKey(v string) *ConfigurationUpsertBulk {
	return u.Update(func(s *ConfigurationUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ConfigurationUpsertBulk) UpdateKey() *ConfigurationUpsertBulk {
	return u.Update(func(s *ConfigurationUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ConfigurationUpsertBulk) SetValue(v string) *ConfigurationUpsertBulk {
	return u.Update(func(s *ConfigurationUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ConfigurationUpsertBulk) UpdateValue() *ConfigurationUpsertBulk {
	return u.Update(func(s *ConfigurationUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *ConfigurationUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConfigurationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConfigurationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConfigurationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
