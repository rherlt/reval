// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/predicate"
	"github.com/rherlt/reval/ent/request"
	"github.com/rherlt/reval/ent/response"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetExternalId sets the "externalId" field.
func (ru *RequestUpdate) SetExternalId(s string) *RequestUpdate {
	ru.mutation.SetExternalId(s)
	return ru
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableExternalId(s *string) *RequestUpdate {
	if s != nil {
		ru.SetExternalId(*s)
	}
	return ru
}

// ClearExternalId clears the value of the "externalId" field.
func (ru *RequestUpdate) ClearExternalId() *RequestUpdate {
	ru.mutation.ClearExternalId()
	return ru
}

// SetFrom sets the "from" field.
func (ru *RequestUpdate) SetFrom(s string) *RequestUpdate {
	ru.mutation.SetFrom(s)
	return ru
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableFrom(s *string) *RequestUpdate {
	if s != nil {
		ru.SetFrom(*s)
	}
	return ru
}

// ClearFrom clears the value of the "from" field.
func (ru *RequestUpdate) ClearFrom() *RequestUpdate {
	ru.mutation.ClearFrom()
	return ru
}

// SetSubject sets the "subject" field.
func (ru *RequestUpdate) SetSubject(s string) *RequestUpdate {
	ru.mutation.SetSubject(s)
	return ru
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableSubject(s *string) *RequestUpdate {
	if s != nil {
		ru.SetSubject(*s)
	}
	return ru
}

// ClearSubject clears the value of the "subject" field.
func (ru *RequestUpdate) ClearSubject() *RequestUpdate {
	ru.mutation.ClearSubject()
	return ru
}

// SetBody sets the "body" field.
func (ru *RequestUpdate) SetBody(s string) *RequestUpdate {
	ru.mutation.SetBody(s)
	return ru
}

// SetDate sets the "date" field.
func (ru *RequestUpdate) SetDate(t time.Time) *RequestUpdate {
	ru.mutation.SetDate(t)
	return ru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableDate(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetDate(*t)
	}
	return ru
}

// ClearDate clears the value of the "date" field.
func (ru *RequestUpdate) ClearDate() *RequestUpdate {
	ru.mutation.ClearDate()
	return ru
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (ru *RequestUpdate) AddResponseIDs(ids ...uuid.UUID) *RequestUpdate {
	ru.mutation.AddResponseIDs(ids...)
	return ru
}

// AddResponses adds the "responses" edges to the Response entity.
func (ru *RequestUpdate) AddResponses(r ...*Response) *RequestUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddResponseIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (ru *RequestUpdate) ClearResponses() *RequestUpdate {
	ru.mutation.ClearResponses()
	return ru
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (ru *RequestUpdate) RemoveResponseIDs(ids ...uuid.UUID) *RequestUpdate {
	ru.mutation.RemoveResponseIDs(ids...)
	return ru
}

// RemoveResponses removes "responses" edges to Response entities.
func (ru *RequestUpdate) RemoveResponses(r ...*Response) *RequestUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ExternalId(); ok {
		_spec.SetField(request.FieldExternalId, field.TypeString, value)
	}
	if ru.mutation.ExternalIdCleared() {
		_spec.ClearField(request.FieldExternalId, field.TypeString)
	}
	if value, ok := ru.mutation.From(); ok {
		_spec.SetField(request.FieldFrom, field.TypeString, value)
	}
	if ru.mutation.FromCleared() {
		_spec.ClearField(request.FieldFrom, field.TypeString)
	}
	if value, ok := ru.mutation.Subject(); ok {
		_spec.SetField(request.FieldSubject, field.TypeString, value)
	}
	if ru.mutation.SubjectCleared() {
		_spec.ClearField(request.FieldSubject, field.TypeString)
	}
	if value, ok := ru.mutation.Body(); ok {
		_spec.SetField(request.FieldBody, field.TypeString, value)
	}
	if value, ok := ru.mutation.Date(); ok {
		_spec.SetField(request.FieldDate, field.TypeTime, value)
	}
	if ru.mutation.DateCleared() {
		_spec.ClearField(request.FieldDate, field.TypeTime)
	}
	if ru.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !ru.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetExternalId sets the "externalId" field.
func (ruo *RequestUpdateOne) SetExternalId(s string) *RequestUpdateOne {
	ruo.mutation.SetExternalId(s)
	return ruo
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableExternalId(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetExternalId(*s)
	}
	return ruo
}

// ClearExternalId clears the value of the "externalId" field.
func (ruo *RequestUpdateOne) ClearExternalId() *RequestUpdateOne {
	ruo.mutation.ClearExternalId()
	return ruo
}

// SetFrom sets the "from" field.
func (ruo *RequestUpdateOne) SetFrom(s string) *RequestUpdateOne {
	ruo.mutation.SetFrom(s)
	return ruo
}

// SetNillableFrom sets the "from" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableFrom(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetFrom(*s)
	}
	return ruo
}

// ClearFrom clears the value of the "from" field.
func (ruo *RequestUpdateOne) ClearFrom() *RequestUpdateOne {
	ruo.mutation.ClearFrom()
	return ruo
}

// SetSubject sets the "subject" field.
func (ruo *RequestUpdateOne) SetSubject(s string) *RequestUpdateOne {
	ruo.mutation.SetSubject(s)
	return ruo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableSubject(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetSubject(*s)
	}
	return ruo
}

// ClearSubject clears the value of the "subject" field.
func (ruo *RequestUpdateOne) ClearSubject() *RequestUpdateOne {
	ruo.mutation.ClearSubject()
	return ruo
}

// SetBody sets the "body" field.
func (ruo *RequestUpdateOne) SetBody(s string) *RequestUpdateOne {
	ruo.mutation.SetBody(s)
	return ruo
}

// SetDate sets the "date" field.
func (ruo *RequestUpdateOne) SetDate(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetDate(t)
	return ruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableDate(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetDate(*t)
	}
	return ruo
}

// ClearDate clears the value of the "date" field.
func (ruo *RequestUpdateOne) ClearDate() *RequestUpdateOne {
	ruo.mutation.ClearDate()
	return ruo
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (ruo *RequestUpdateOne) AddResponseIDs(ids ...uuid.UUID) *RequestUpdateOne {
	ruo.mutation.AddResponseIDs(ids...)
	return ruo
}

// AddResponses adds the "responses" edges to the Response entity.
func (ruo *RequestUpdateOne) AddResponses(r ...*Response) *RequestUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddResponseIDs(ids...)
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// ClearResponses clears all "responses" edges to the Response entity.
func (ruo *RequestUpdateOne) ClearResponses() *RequestUpdateOne {
	ruo.mutation.ClearResponses()
	return ruo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (ruo *RequestUpdateOne) RemoveResponseIDs(ids ...uuid.UUID) *RequestUpdateOne {
	ruo.mutation.RemoveResponseIDs(ids...)
	return ruo
}

// RemoveResponses removes "responses" edges to Response entities.
func (ruo *RequestUpdateOne) RemoveResponses(r ...*Response) *RequestUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveResponseIDs(ids...)
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeUUID))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.ExternalId(); ok {
		_spec.SetField(request.FieldExternalId, field.TypeString, value)
	}
	if ruo.mutation.ExternalIdCleared() {
		_spec.ClearField(request.FieldExternalId, field.TypeString)
	}
	if value, ok := ruo.mutation.From(); ok {
		_spec.SetField(request.FieldFrom, field.TypeString, value)
	}
	if ruo.mutation.FromCleared() {
		_spec.ClearField(request.FieldFrom, field.TypeString)
	}
	if value, ok := ruo.mutation.Subject(); ok {
		_spec.SetField(request.FieldSubject, field.TypeString, value)
	}
	if ruo.mutation.SubjectCleared() {
		_spec.ClearField(request.FieldSubject, field.TypeString)
	}
	if value, ok := ruo.mutation.Body(); ok {
		_spec.SetField(request.FieldBody, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Date(); ok {
		_spec.SetField(request.FieldDate, field.TypeTime, value)
	}
	if ruo.mutation.DateCleared() {
		_spec.ClearField(request.FieldDate, field.TypeTime)
	}
	if ruo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !ruo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   request.ResponsesTable,
			Columns: []string{request.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
