// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/scenario"
)

// Scenario is the model entity for the Scenario schema.
type Scenario struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Desctiption holds the value of the "desctiption" field.
	Desctiption string `json:"desctiption,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScenarioQuery when eager-loading is set.
	Edges        ScenarioEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScenarioEdges holds the relations/edges for other nodes in the graph.
type ScenarioEdges struct {
	// Responses holds the value of the responses edge.
	Responses []*Response `json:"responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e ScenarioEdges) ResponsesOrErr() ([]*Response, error) {
	if e.loadedTypes[0] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scenario) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scenario.FieldExternalId, scenario.FieldName, scenario.FieldDesctiption:
			values[i] = new(sql.NullString)
		case scenario.FieldDate:
			values[i] = new(sql.NullTime)
		case scenario.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scenario fields.
func (s *Scenario) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scenario.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case scenario.FieldExternalId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalId", values[i])
			} else if value.Valid {
				s.ExternalId = value.String
			}
		case scenario.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case scenario.FieldDesctiption:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desctiption", values[i])
			} else if value.Valid {
				s.Desctiption = value.String
			}
		case scenario.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				s.Date = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scenario.
// This includes values selected through modifiers, order, etc.
func (s *Scenario) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryResponses queries the "responses" edge of the Scenario entity.
func (s *Scenario) QueryResponses() *ResponseQuery {
	return NewScenarioClient(s.config).QueryResponses(s)
}

// Update returns a builder for updating this Scenario.
// Note that you need to call Scenario.Unwrap() before calling this method if this Scenario
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scenario) Update() *ScenarioUpdateOne {
	return NewScenarioClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scenario entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scenario) Unwrap() *Scenario {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scenario is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scenario) String() string {
	var builder strings.Builder
	builder.WriteString("Scenario(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("externalId=")
	builder.WriteString(s.ExternalId)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("desctiption=")
	builder.WriteString(s.Desctiption)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(s.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scenarios is a parsable slice of Scenario.
type Scenarios []*Scenario
