// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/scenario"
)

// ScenarioCreate is the builder for creating a Scenario entity.
type ScenarioCreate struct {
	config
	mutation *ScenarioMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExternalId sets the "externalId" field.
func (sc *ScenarioCreate) SetExternalId(s string) *ScenarioCreate {
	sc.mutation.SetExternalId(s)
	return sc
}

// SetNillableExternalId sets the "externalId" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableExternalId(s *string) *ScenarioCreate {
	if s != nil {
		sc.SetExternalId(*s)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *ScenarioCreate) SetName(s string) *ScenarioCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableName(s *string) *ScenarioCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetDesctiption sets the "desctiption" field.
func (sc *ScenarioCreate) SetDesctiption(s string) *ScenarioCreate {
	sc.mutation.SetDesctiption(s)
	return sc
}

// SetNillableDesctiption sets the "desctiption" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableDesctiption(s *string) *ScenarioCreate {
	if s != nil {
		sc.SetDesctiption(*s)
	}
	return sc
}

// SetDate sets the "date" field.
func (sc *ScenarioCreate) SetDate(t time.Time) *ScenarioCreate {
	sc.mutation.SetDate(t)
	return sc
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableDate(t *time.Time) *ScenarioCreate {
	if t != nil {
		sc.SetDate(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScenarioCreate) SetID(u uuid.UUID) *ScenarioCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScenarioCreate) SetNillableID(u *uuid.UUID) *ScenarioCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (sc *ScenarioCreate) AddResponseIDs(ids ...uuid.UUID) *ScenarioCreate {
	sc.mutation.AddResponseIDs(ids...)
	return sc
}

// AddResponses adds the "responses" edges to the Response entity.
func (sc *ScenarioCreate) AddResponses(r ...*Response) *ScenarioCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddResponseIDs(ids...)
}

// Mutation returns the ScenarioMutation object of the builder.
func (sc *ScenarioCreate) Mutation() *ScenarioMutation {
	return sc.mutation
}

// Save creates the Scenario in the database.
func (sc *ScenarioCreate) Save(ctx context.Context) (*Scenario, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScenarioCreate) SaveX(ctx context.Context) *Scenario {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScenarioCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScenarioCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScenarioCreate) defaults() {
	if _, ok := sc.mutation.ID(); !ok {
		v := scenario.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScenarioCreate) check() error {
	return nil
}

func (sc *ScenarioCreate) sqlSave(ctx context.Context) (*Scenario, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScenarioCreate) createSpec() (*Scenario, *sqlgraph.CreateSpec) {
	var (
		_node = &Scenario{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(scenario.Table, sqlgraph.NewFieldSpec(scenario.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.ExternalId(); ok {
		_spec.SetField(scenario.FieldExternalId, field.TypeString, value)
		_node.ExternalId = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(scenario.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Desctiption(); ok {
		_spec.SetField(scenario.FieldDesctiption, field.TypeString, value)
		_node.Desctiption = value
	}
	if value, ok := sc.mutation.Date(); ok {
		_spec.SetField(scenario.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if nodes := sc.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scenario.ResponsesTable,
			Columns: []string{scenario.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(response.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scenario.Create().
//		SetExternalId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioUpsert) {
//			SetExternalId(v+v).
//		}).
//		Exec(ctx)
func (sc *ScenarioCreate) OnConflict(opts ...sql.ConflictOption) *ScenarioUpsertOne {
	sc.conflict = opts
	return &ScenarioUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScenarioCreate) OnConflictColumns(columns ...string) *ScenarioUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScenarioUpsertOne{
		create: sc,
	}
}

type (
	// ScenarioUpsertOne is the builder for "upsert"-ing
	//  one Scenario node.
	ScenarioUpsertOne struct {
		create *ScenarioCreate
	}

	// ScenarioUpsert is the "OnConflict" setter.
	ScenarioUpsert struct {
		*sql.UpdateSet
	}
)

// SetExternalId sets the "externalId" field.
func (u *ScenarioUpsert) SetExternalId(v string) *ScenarioUpsert {
	u.Set(scenario.FieldExternalId, v)
	return u
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateExternalId() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldExternalId)
	return u
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ScenarioUpsert) ClearExternalId() *ScenarioUpsert {
	u.SetNull(scenario.FieldExternalId)
	return u
}

// SetName sets the "name" field.
func (u *ScenarioUpsert) SetName(v string) *ScenarioUpsert {
	u.Set(scenario.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateName() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *ScenarioUpsert) ClearName() *ScenarioUpsert {
	u.SetNull(scenario.FieldName)
	return u
}

// SetDesctiption sets the "desctiption" field.
func (u *ScenarioUpsert) SetDesctiption(v string) *ScenarioUpsert {
	u.Set(scenario.FieldDesctiption, v)
	return u
}

// UpdateDesctiption sets the "desctiption" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateDesctiption() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldDesctiption)
	return u
}

// ClearDesctiption clears the value of the "desctiption" field.
func (u *ScenarioUpsert) ClearDesctiption() *ScenarioUpsert {
	u.SetNull(scenario.FieldDesctiption)
	return u
}

// SetDate sets the "date" field.
func (u *ScenarioUpsert) SetDate(v time.Time) *ScenarioUpsert {
	u.Set(scenario.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ScenarioUpsert) UpdateDate() *ScenarioUpsert {
	u.SetExcluded(scenario.FieldDate)
	return u
}

// ClearDate clears the value of the "date" field.
func (u *ScenarioUpsert) ClearDate() *ScenarioUpsert {
	u.SetNull(scenario.FieldDate)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenario.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioUpsertOne) UpdateNewValues() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scenario.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScenarioUpsertOne) Ignore() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioUpsertOne) DoNothing() *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCreate.OnConflict
// documentation for more info.
func (u *ScenarioUpsertOne) Update(set func(*ScenarioUpsert)) *ScenarioUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalId sets the "externalId" field.
func (u *ScenarioUpsertOne) SetExternalId(v string) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetExternalId(v)
	})
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateExternalId() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateExternalId()
	})
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ScenarioUpsertOne) ClearExternalId() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearExternalId()
	})
}

// SetName sets the "name" field.
func (u *ScenarioUpsertOne) SetName(v string) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateName() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ScenarioUpsertOne) ClearName() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearName()
	})
}

// SetDesctiption sets the "desctiption" field.
func (u *ScenarioUpsertOne) SetDesctiption(v string) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDesctiption(v)
	})
}

// UpdateDesctiption sets the "desctiption" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateDesctiption() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDesctiption()
	})
}

// ClearDesctiption clears the value of the "desctiption" field.
func (u *ScenarioUpsertOne) ClearDesctiption() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearDesctiption()
	})
}

// SetDate sets the "date" field.
func (u *ScenarioUpsertOne) SetDate(v time.Time) *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ScenarioUpsertOne) UpdateDate() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *ScenarioUpsertOne) ClearDate() *ScenarioUpsertOne {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearDate()
	})
}

// Exec executes the query.
func (u *ScenarioUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScenarioUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ScenarioUpsertOne.ID is not supported by MySQL driver. Use ScenarioUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScenarioUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ScenarioCreateBulk is the builder for creating many Scenario entities in bulk.
type ScenarioCreateBulk struct {
	config
	builders []*ScenarioCreate
	conflict []sql.ConflictOption
}

// Save creates the Scenario entities in the database.
func (scb *ScenarioCreateBulk) Save(ctx context.Context) ([]*Scenario, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scenario, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScenarioMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScenarioCreateBulk) SaveX(ctx context.Context) []*Scenario {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScenarioCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScenarioCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scenario.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScenarioUpsert) {
//			SetExternalId(v+v).
//		}).
//		Exec(ctx)
func (scb *ScenarioCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScenarioUpsertBulk {
	scb.conflict = opts
	return &ScenarioUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScenarioCreateBulk) OnConflictColumns(columns ...string) *ScenarioUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScenarioUpsertBulk{
		create: scb,
	}
}

// ScenarioUpsertBulk is the builder for "upsert"-ing
// a bulk of Scenario nodes.
type ScenarioUpsertBulk struct {
	create *ScenarioCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scenario.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScenarioUpsertBulk) UpdateNewValues() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scenario.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scenario.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScenarioUpsertBulk) Ignore() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScenarioUpsertBulk) DoNothing() *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScenarioCreateBulk.OnConflict
// documentation for more info.
func (u *ScenarioUpsertBulk) Update(set func(*ScenarioUpsert)) *ScenarioUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScenarioUpsert{UpdateSet: update})
	}))
	return u
}

// SetExternalId sets the "externalId" field.
func (u *ScenarioUpsertBulk) SetExternalId(v string) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetExternalId(v)
	})
}

// UpdateExternalId sets the "externalId" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateExternalId() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateExternalId()
	})
}

// ClearExternalId clears the value of the "externalId" field.
func (u *ScenarioUpsertBulk) ClearExternalId() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearExternalId()
	})
}

// SetName sets the "name" field.
func (u *ScenarioUpsertBulk) SetName(v string) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateName() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *ScenarioUpsertBulk) ClearName() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearName()
	})
}

// SetDesctiption sets the "desctiption" field.
func (u *ScenarioUpsertBulk) SetDesctiption(v string) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDesctiption(v)
	})
}

// UpdateDesctiption sets the "desctiption" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateDesctiption() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDesctiption()
	})
}

// ClearDesctiption clears the value of the "desctiption" field.
func (u *ScenarioUpsertBulk) ClearDesctiption() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearDesctiption()
	})
}

// SetDate sets the "date" field.
func (u *ScenarioUpsertBulk) SetDate(v time.Time) *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *ScenarioUpsertBulk) UpdateDate() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *ScenarioUpsertBulk) ClearDate() *ScenarioUpsertBulk {
	return u.Update(func(s *ScenarioUpsert) {
		s.ClearDate()
	})
}

// Exec executes the query.
func (u *ScenarioUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScenarioCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScenarioCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScenarioUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
