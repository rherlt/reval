// Code generated by ent, DO NOT EDIT.

package evaluation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the evaluation type in the database.
	Label = "evaluation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldResponseId holds the string denoting the responseid field in the database.
	FieldResponseId = "response_id"
	// FieldExternalId holds the string denoting the externalid field in the database.
	FieldExternalId = "external_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldEvaluationResult holds the string denoting the evaluationresult field in the database.
	FieldEvaluationResult = "evaluation_result"
	// FieldEvaluationPromptId holds the string denoting the evaluationpromptid field in the database.
	FieldEvaluationPromptId = "evaluation_prompt_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeResponse holds the string denoting the response edge name in mutations.
	EdgeResponse = "response"
	// EdgeEvaluationPrompts holds the string denoting the evaluationprompts edge name in mutations.
	EdgeEvaluationPrompts = "evaluationPrompts"
	// Table holds the table name of the evaluation in the database.
	Table = "evaluations"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "evaluations"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// ResponseTable is the table that holds the response relation/edge.
	ResponseTable = "evaluations"
	// ResponseInverseTable is the table name for the Response entity.
	// It exists in this package in order to avoid circular dependency with the "response" package.
	ResponseInverseTable = "responses"
	// ResponseColumn is the table column denoting the response relation/edge.
	ResponseColumn = "response_id"
	// EvaluationPromptsTable is the table that holds the evaluationPrompts relation/edge.
	EvaluationPromptsTable = "evaluations"
	// EvaluationPromptsInverseTable is the table name for the EvaluationPrompt entity.
	// It exists in this package in order to avoid circular dependency with the "evaluationprompt" package.
	EvaluationPromptsInverseTable = "evaluation_prompts"
	// EvaluationPromptsColumn is the table column denoting the evaluationPrompts relation/edge.
	EvaluationPromptsColumn = "evaluation_prompt_id"
)

// Columns holds all SQL columns for evaluation fields.
var Columns = []string{
	FieldID,
	FieldUserId,
	FieldResponseId,
	FieldExternalId,
	FieldDate,
	FieldEvaluationResult,
	FieldEvaluationPromptId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Evaluation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByResponseId orders the results by the responseId field.
func ByResponseId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseId, opts...).ToFunc()
}

// ByExternalId orders the results by the externalId field.
func ByExternalId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalId, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByEvaluationResult orders the results by the evaluationResult field.
func ByEvaluationResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvaluationResult, opts...).ToFunc()
}

// ByEvaluationPromptId orders the results by the evaluationPromptId field.
func ByEvaluationPromptId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEvaluationPromptId, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByResponseField orders the results by response field.
func ByResponseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResponseStep(), sql.OrderByField(field, opts...))
	}
}

// ByEvaluationPromptsField orders the results by evaluationPrompts field.
func ByEvaluationPromptsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvaluationPromptsStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newResponseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResponseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ResponseTable, ResponseColumn),
	)
}
func newEvaluationPromptsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvaluationPromptsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EvaluationPromptsTable, EvaluationPromptsColumn),
	)
}
