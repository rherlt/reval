// Code generated by ent, DO NOT EDIT.

package evaluation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLTE(FieldID, id))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldUserId, v))
}

// ResponseId applies equality check predicate on the "responseId" field. It's identical to ResponseIdEQ.
func ResponseId(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldResponseId, v))
}

// ExternalId applies equality check predicate on the "externalId" field. It's identical to ExternalIdEQ.
func ExternalId(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldExternalId, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldDate, v))
}

// EvaluationResult applies equality check predicate on the "evaluationResult" field. It's identical to EvaluationResultEQ.
func EvaluationResult(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldEvaluationResult, v))
}

// EvaluationPromptId applies equality check predicate on the "evaluationPromptId" field. It's identical to EvaluationPromptIdEQ.
func EvaluationPromptId(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldEvaluationPromptId, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldUserId, vs...))
}

// ResponseIdEQ applies the EQ predicate on the "responseId" field.
func ResponseIdEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldResponseId, v))
}

// ResponseIdNEQ applies the NEQ predicate on the "responseId" field.
func ResponseIdNEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldResponseId, v))
}

// ResponseIdIn applies the In predicate on the "responseId" field.
func ResponseIdIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldResponseId, vs...))
}

// ResponseIdNotIn applies the NotIn predicate on the "responseId" field.
func ResponseIdNotIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldResponseId, vs...))
}

// ExternalIdEQ applies the EQ predicate on the "externalId" field.
func ExternalIdEQ(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldExternalId, v))
}

// ExternalIdNEQ applies the NEQ predicate on the "externalId" field.
func ExternalIdNEQ(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldExternalId, v))
}

// ExternalIdIn applies the In predicate on the "externalId" field.
func ExternalIdIn(vs ...string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldExternalId, vs...))
}

// ExternalIdNotIn applies the NotIn predicate on the "externalId" field.
func ExternalIdNotIn(vs ...string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldExternalId, vs...))
}

// ExternalIdGT applies the GT predicate on the "externalId" field.
func ExternalIdGT(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGT(FieldExternalId, v))
}

// ExternalIdGTE applies the GTE predicate on the "externalId" field.
func ExternalIdGTE(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGTE(FieldExternalId, v))
}

// ExternalIdLT applies the LT predicate on the "externalId" field.
func ExternalIdLT(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLT(FieldExternalId, v))
}

// ExternalIdLTE applies the LTE predicate on the "externalId" field.
func ExternalIdLTE(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLTE(FieldExternalId, v))
}

// ExternalIdContains applies the Contains predicate on the "externalId" field.
func ExternalIdContains(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldContains(FieldExternalId, v))
}

// ExternalIdHasPrefix applies the HasPrefix predicate on the "externalId" field.
func ExternalIdHasPrefix(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldHasPrefix(FieldExternalId, v))
}

// ExternalIdHasSuffix applies the HasSuffix predicate on the "externalId" field.
func ExternalIdHasSuffix(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldHasSuffix(FieldExternalId, v))
}

// ExternalIdIsNil applies the IsNil predicate on the "externalId" field.
func ExternalIdIsNil() predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIsNull(FieldExternalId))
}

// ExternalIdNotNil applies the NotNil predicate on the "externalId" field.
func ExternalIdNotNil() predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotNull(FieldExternalId))
}

// ExternalIdEqualFold applies the EqualFold predicate on the "externalId" field.
func ExternalIdEqualFold(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEqualFold(FieldExternalId, v))
}

// ExternalIdContainsFold applies the ContainsFold predicate on the "externalId" field.
func ExternalIdContainsFold(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldContainsFold(FieldExternalId, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLTE(FieldDate, v))
}

// DateIsNil applies the IsNil predicate on the "date" field.
func DateIsNil() predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIsNull(FieldDate))
}

// DateNotNil applies the NotNil predicate on the "date" field.
func DateNotNil() predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotNull(FieldDate))
}

// EvaluationResultEQ applies the EQ predicate on the "evaluationResult" field.
func EvaluationResultEQ(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldEvaluationResult, v))
}

// EvaluationResultNEQ applies the NEQ predicate on the "evaluationResult" field.
func EvaluationResultNEQ(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldEvaluationResult, v))
}

// EvaluationResultIn applies the In predicate on the "evaluationResult" field.
func EvaluationResultIn(vs ...string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldEvaluationResult, vs...))
}

// EvaluationResultNotIn applies the NotIn predicate on the "evaluationResult" field.
func EvaluationResultNotIn(vs ...string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldEvaluationResult, vs...))
}

// EvaluationResultGT applies the GT predicate on the "evaluationResult" field.
func EvaluationResultGT(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGT(FieldEvaluationResult, v))
}

// EvaluationResultGTE applies the GTE predicate on the "evaluationResult" field.
func EvaluationResultGTE(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldGTE(FieldEvaluationResult, v))
}

// EvaluationResultLT applies the LT predicate on the "evaluationResult" field.
func EvaluationResultLT(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLT(FieldEvaluationResult, v))
}

// EvaluationResultLTE applies the LTE predicate on the "evaluationResult" field.
func EvaluationResultLTE(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldLTE(FieldEvaluationResult, v))
}

// EvaluationResultContains applies the Contains predicate on the "evaluationResult" field.
func EvaluationResultContains(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldContains(FieldEvaluationResult, v))
}

// EvaluationResultHasPrefix applies the HasPrefix predicate on the "evaluationResult" field.
func EvaluationResultHasPrefix(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldHasPrefix(FieldEvaluationResult, v))
}

// EvaluationResultHasSuffix applies the HasSuffix predicate on the "evaluationResult" field.
func EvaluationResultHasSuffix(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldHasSuffix(FieldEvaluationResult, v))
}

// EvaluationResultEqualFold applies the EqualFold predicate on the "evaluationResult" field.
func EvaluationResultEqualFold(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEqualFold(FieldEvaluationResult, v))
}

// EvaluationResultContainsFold applies the ContainsFold predicate on the "evaluationResult" field.
func EvaluationResultContainsFold(v string) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldContainsFold(FieldEvaluationResult, v))
}

// EvaluationPromptIdEQ applies the EQ predicate on the "evaluationPromptId" field.
func EvaluationPromptIdEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldEQ(FieldEvaluationPromptId, v))
}

// EvaluationPromptIdNEQ applies the NEQ predicate on the "evaluationPromptId" field.
func EvaluationPromptIdNEQ(v uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNEQ(FieldEvaluationPromptId, v))
}

// EvaluationPromptIdIn applies the In predicate on the "evaluationPromptId" field.
func EvaluationPromptIdIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldIn(FieldEvaluationPromptId, vs...))
}

// EvaluationPromptIdNotIn applies the NotIn predicate on the "evaluationPromptId" field.
func EvaluationPromptIdNotIn(vs ...uuid.UUID) predicate.Evaluation {
	return predicate.Evaluation(sql.FieldNotIn(FieldEvaluationPromptId, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResponse applies the HasEdge predicate on the "response" edge.
func HasResponse() predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ResponseTable, ResponseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResponseWith applies the HasEdge predicate on the "response" edge with a given conditions (other predicates).
func HasResponseWith(preds ...predicate.Response) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := newResponseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvaluationPrompts applies the HasEdge predicate on the "evaluationPrompts" edge.
func HasEvaluationPrompts() predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EvaluationPromptsTable, EvaluationPromptsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvaluationPromptsWith applies the HasEdge predicate on the "evaluationPrompts" edge with a given conditions (other predicates).
func HasEvaluationPromptsWith(preds ...predicate.EvaluationPrompt) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		step := newEvaluationPromptsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Evaluation) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Evaluation) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Evaluation) predicate.Evaluation {
	return predicate.Evaluation(func(s *sql.Selector) {
		p(s.Not())
	})
}
