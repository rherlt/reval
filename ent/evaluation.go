// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/evaluationprompt"
	"github.com/rherlt/reval/ent/response"
	"github.com/rherlt/reval/ent/user"
)

// Evaluation is the model entity for the Evaluation schema.
type Evaluation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId uuid.UUID `json:"userId,omitempty"`
	// ResponseId holds the value of the "responseId" field.
	ResponseId uuid.UUID `json:"responseId,omitempty"`
	// ExternalId holds the value of the "externalId" field.
	ExternalId string `json:"externalId,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// EvaluationResult holds the value of the "evaluationResult" field.
	EvaluationResult string `json:"evaluationResult,omitempty"`
	// EvaluationPromptId holds the value of the "evaluationPromptId" field.
	EvaluationPromptId uuid.UUID `json:"evaluationPromptId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EvaluationQuery when eager-loading is set.
	Edges        EvaluationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EvaluationEdges holds the relations/edges for other nodes in the graph.
type EvaluationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Response holds the value of the response edge.
	Response *Response `json:"response,omitempty"`
	// EvaluationPrompts holds the value of the evaluationPrompts edge.
	EvaluationPrompts *EvaluationPrompt `json:"evaluationPrompts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvaluationEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ResponseOrErr returns the Response value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvaluationEdges) ResponseOrErr() (*Response, error) {
	if e.loadedTypes[1] {
		if e.Response == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: response.Label}
		}
		return e.Response, nil
	}
	return nil, &NotLoadedError{edge: "response"}
}

// EvaluationPromptsOrErr returns the EvaluationPrompts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EvaluationEdges) EvaluationPromptsOrErr() (*EvaluationPrompt, error) {
	if e.loadedTypes[2] {
		if e.EvaluationPrompts == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: evaluationprompt.Label}
		}
		return e.EvaluationPrompts, nil
	}
	return nil, &NotLoadedError{edge: "evaluationPrompts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Evaluation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case evaluation.FieldExternalId, evaluation.FieldEvaluationResult:
			values[i] = new(sql.NullString)
		case evaluation.FieldDate:
			values[i] = new(sql.NullTime)
		case evaluation.FieldID, evaluation.FieldUserId, evaluation.FieldResponseId, evaluation.FieldEvaluationPromptId:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Evaluation fields.
func (e *Evaluation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evaluation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case evaluation.FieldUserId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value != nil {
				e.UserId = *value
			}
		case evaluation.FieldResponseId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field responseId", values[i])
			} else if value != nil {
				e.ResponseId = *value
			}
		case evaluation.FieldExternalId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field externalId", values[i])
			} else if value.Valid {
				e.ExternalId = value.String
			}
		case evaluation.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				e.Date = value.Time
			}
		case evaluation.FieldEvaluationResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field evaluationResult", values[i])
			} else if value.Valid {
				e.EvaluationResult = value.String
			}
		case evaluation.FieldEvaluationPromptId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field evaluationPromptId", values[i])
			} else if value != nil {
				e.EvaluationPromptId = *value
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Evaluation.
// This includes values selected through modifiers, order, etc.
func (e *Evaluation) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Evaluation entity.
func (e *Evaluation) QueryUser() *UserQuery {
	return NewEvaluationClient(e.config).QueryUser(e)
}

// QueryResponse queries the "response" edge of the Evaluation entity.
func (e *Evaluation) QueryResponse() *ResponseQuery {
	return NewEvaluationClient(e.config).QueryResponse(e)
}

// QueryEvaluationPrompts queries the "evaluationPrompts" edge of the Evaluation entity.
func (e *Evaluation) QueryEvaluationPrompts() *EvaluationPromptQuery {
	return NewEvaluationClient(e.config).QueryEvaluationPrompts(e)
}

// Update returns a builder for updating this Evaluation.
// Note that you need to call Evaluation.Unwrap() before calling this method if this Evaluation
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Evaluation) Update() *EvaluationUpdateOne {
	return NewEvaluationClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Evaluation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Evaluation) Unwrap() *Evaluation {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Evaluation is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Evaluation) String() string {
	var builder strings.Builder
	builder.WriteString("Evaluation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("userId=")
	builder.WriteString(fmt.Sprintf("%v", e.UserId))
	builder.WriteString(", ")
	builder.WriteString("responseId=")
	builder.WriteString(fmt.Sprintf("%v", e.ResponseId))
	builder.WriteString(", ")
	builder.WriteString("externalId=")
	builder.WriteString(e.ExternalId)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(e.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("evaluationResult=")
	builder.WriteString(e.EvaluationResult)
	builder.WriteString(", ")
	builder.WriteString("evaluationPromptId=")
	builder.WriteString(fmt.Sprintf("%v", e.EvaluationPromptId))
	builder.WriteByte(')')
	return builder.String()
}

// Evaluations is a parsable slice of Evaluation.
type Evaluations []*Evaluation
