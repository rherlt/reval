// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rherlt/reval/ent/evaluation"
	"github.com/rherlt/reval/ent/evaluationprompt"
)

// EvaluationPromptCreate is the builder for creating a EvaluationPrompt entity.
type EvaluationPromptCreate struct {
	config
	mutation *EvaluationPromptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPrompt sets the "prompt" field.
func (epc *EvaluationPromptCreate) SetPrompt(s string) *EvaluationPromptCreate {
	epc.mutation.SetPrompt(s)
	return epc
}

// SetID sets the "id" field.
func (epc *EvaluationPromptCreate) SetID(u uuid.UUID) *EvaluationPromptCreate {
	epc.mutation.SetID(u)
	return epc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (epc *EvaluationPromptCreate) SetNillableID(u *uuid.UUID) *EvaluationPromptCreate {
	if u != nil {
		epc.SetID(*u)
	}
	return epc
}

// AddEvaluationIDs adds the "evaluations" edge to the Evaluation entity by IDs.
func (epc *EvaluationPromptCreate) AddEvaluationIDs(ids ...uuid.UUID) *EvaluationPromptCreate {
	epc.mutation.AddEvaluationIDs(ids...)
	return epc
}

// AddEvaluations adds the "evaluations" edges to the Evaluation entity.
func (epc *EvaluationPromptCreate) AddEvaluations(e ...*Evaluation) *EvaluationPromptCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epc.AddEvaluationIDs(ids...)
}

// Mutation returns the EvaluationPromptMutation object of the builder.
func (epc *EvaluationPromptCreate) Mutation() *EvaluationPromptMutation {
	return epc.mutation
}

// Save creates the EvaluationPrompt in the database.
func (epc *EvaluationPromptCreate) Save(ctx context.Context) (*EvaluationPrompt, error) {
	epc.defaults()
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EvaluationPromptCreate) SaveX(ctx context.Context) *EvaluationPrompt {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EvaluationPromptCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EvaluationPromptCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epc *EvaluationPromptCreate) defaults() {
	if _, ok := epc.mutation.ID(); !ok {
		v := evaluationprompt.DefaultID()
		epc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (epc *EvaluationPromptCreate) check() error {
	if _, ok := epc.mutation.Prompt(); !ok {
		return &ValidationError{Name: "prompt", err: errors.New(`ent: missing required field "EvaluationPrompt.prompt"`)}
	}
	return nil
}

func (epc *EvaluationPromptCreate) sqlSave(ctx context.Context) (*EvaluationPrompt, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *EvaluationPromptCreate) createSpec() (*EvaluationPrompt, *sqlgraph.CreateSpec) {
	var (
		_node = &EvaluationPrompt{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(evaluationprompt.Table, sqlgraph.NewFieldSpec(evaluationprompt.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = epc.conflict
	if id, ok := epc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := epc.mutation.Prompt(); ok {
		_spec.SetField(evaluationprompt.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if nodes := epc.mutation.EvaluationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   evaluationprompt.EvaluationsTable,
			Columns: []string{evaluationprompt.EvaluationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evaluation.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EvaluationPrompt.Create().
//		SetPrompt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EvaluationPromptUpsert) {
//			SetPrompt(v+v).
//		}).
//		Exec(ctx)
func (epc *EvaluationPromptCreate) OnConflict(opts ...sql.ConflictOption) *EvaluationPromptUpsertOne {
	epc.conflict = opts
	return &EvaluationPromptUpsertOne{
		create: epc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (epc *EvaluationPromptCreate) OnConflictColumns(columns ...string) *EvaluationPromptUpsertOne {
	epc.conflict = append(epc.conflict, sql.ConflictColumns(columns...))
	return &EvaluationPromptUpsertOne{
		create: epc,
	}
}

type (
	// EvaluationPromptUpsertOne is the builder for "upsert"-ing
	//  one EvaluationPrompt node.
	EvaluationPromptUpsertOne struct {
		create *EvaluationPromptCreate
	}

	// EvaluationPromptUpsert is the "OnConflict" setter.
	EvaluationPromptUpsert struct {
		*sql.UpdateSet
	}
)

// SetPrompt sets the "prompt" field.
func (u *EvaluationPromptUpsert) SetPrompt(v string) *EvaluationPromptUpsert {
	u.Set(evaluationprompt.FieldPrompt, v)
	return u
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *EvaluationPromptUpsert) UpdatePrompt() *EvaluationPromptUpsert {
	u.SetExcluded(evaluationprompt.FieldPrompt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(evaluationprompt.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EvaluationPromptUpsertOne) UpdateNewValues() *EvaluationPromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(evaluationprompt.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EvaluationPromptUpsertOne) Ignore() *EvaluationPromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EvaluationPromptUpsertOne) DoNothing() *EvaluationPromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EvaluationPromptCreate.OnConflict
// documentation for more info.
func (u *EvaluationPromptUpsertOne) Update(set func(*EvaluationPromptUpsert)) *EvaluationPromptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EvaluationPromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrompt sets the "prompt" field.
func (u *EvaluationPromptUpsertOne) SetPrompt(v string) *EvaluationPromptUpsertOne {
	return u.Update(func(s *EvaluationPromptUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *EvaluationPromptUpsertOne) UpdatePrompt() *EvaluationPromptUpsertOne {
	return u.Update(func(s *EvaluationPromptUpsert) {
		s.UpdatePrompt()
	})
}

// Exec executes the query.
func (u *EvaluationPromptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EvaluationPromptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EvaluationPromptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EvaluationPromptUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EvaluationPromptUpsertOne.ID is not supported by MySQL driver. Use EvaluationPromptUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EvaluationPromptUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EvaluationPromptCreateBulk is the builder for creating many EvaluationPrompt entities in bulk.
type EvaluationPromptCreateBulk struct {
	config
	builders []*EvaluationPromptCreate
	conflict []sql.ConflictOption
}

// Save creates the EvaluationPrompt entities in the database.
func (epcb *EvaluationPromptCreateBulk) Save(ctx context.Context) ([]*EvaluationPrompt, error) {
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EvaluationPrompt, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EvaluationPromptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = epcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EvaluationPromptCreateBulk) SaveX(ctx context.Context) []*EvaluationPrompt {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EvaluationPromptCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EvaluationPromptCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EvaluationPrompt.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EvaluationPromptUpsert) {
//			SetPrompt(v+v).
//		}).
//		Exec(ctx)
func (epcb *EvaluationPromptCreateBulk) OnConflict(opts ...sql.ConflictOption) *EvaluationPromptUpsertBulk {
	epcb.conflict = opts
	return &EvaluationPromptUpsertBulk{
		create: epcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (epcb *EvaluationPromptCreateBulk) OnConflictColumns(columns ...string) *EvaluationPromptUpsertBulk {
	epcb.conflict = append(epcb.conflict, sql.ConflictColumns(columns...))
	return &EvaluationPromptUpsertBulk{
		create: epcb,
	}
}

// EvaluationPromptUpsertBulk is the builder for "upsert"-ing
// a bulk of EvaluationPrompt nodes.
type EvaluationPromptUpsertBulk struct {
	create *EvaluationPromptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(evaluationprompt.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EvaluationPromptUpsertBulk) UpdateNewValues() *EvaluationPromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(evaluationprompt.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EvaluationPrompt.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EvaluationPromptUpsertBulk) Ignore() *EvaluationPromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EvaluationPromptUpsertBulk) DoNothing() *EvaluationPromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EvaluationPromptCreateBulk.OnConflict
// documentation for more info.
func (u *EvaluationPromptUpsertBulk) Update(set func(*EvaluationPromptUpsert)) *EvaluationPromptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EvaluationPromptUpsert{UpdateSet: update})
	}))
	return u
}

// SetPrompt sets the "prompt" field.
func (u *EvaluationPromptUpsertBulk) SetPrompt(v string) *EvaluationPromptUpsertBulk {
	return u.Update(func(s *EvaluationPromptUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *EvaluationPromptUpsertBulk) UpdatePrompt() *EvaluationPromptUpsertBulk {
	return u.Update(func(s *EvaluationPromptUpsert) {
		s.UpdatePrompt()
	})
}

// Exec executes the query.
func (u *EvaluationPromptUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EvaluationPromptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EvaluationPromptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EvaluationPromptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
